<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Program on kingjcy blog</title>
    <link>https://kingjcy.github.io/tags/program/</link>
    <description>Recent content in Program on kingjcy blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>Copyright (c) 2020. All rights reserved.</copyright>
    <lastBuildDate>Tue, 18 Apr 2017 20:14:11 +0800</lastBuildDate>
    
	<atom:link href="https://kingjcy.github.io/tags/program/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>项目系列---- PaaS平台</title>
      <link>https://kingjcy.github.io/post/programe/paas/paas/</link>
      <pubDate>Tue, 18 Apr 2017 20:14:11 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/programe/paas/paas/</guid>
      <description>主要是移动容器云平台的建设
paas版本到1.0
paas平台是一个运行管理监控容器应用的自动化平台，集成了前端门户，api网关，权限模块，资源模块，应用模块，集群模块，监控告警，能力模块这些模块，实现了应用的快速开发，测试，简单部署，监控告警等运维功能的平台，主要使用了k8s相关组件，docker，harbor等容器技术，kong api网关技术，基于rbac的权限控制技术，prometheus+grafana监控告警技术，flannel，caclio等网络技术，etcd，redis，mysql等存储技术，实现单点登录，服务发现，数据存储等。其实就是一个给产品跑的服务平台。
1.门户界面
登录&amp;ndash;首页&amp;mdash;-个人资源概览&amp;ndash;应用／系统／资源运维&amp;ndash;监控告警
具体看监控告警界面
有文件可以参考&amp;mdash;ppt
租户&amp;ndash;集群&amp;ndash;namespace&amp;ndash;应用-方法
cpu／内存／磁盘／应用／容器／镜像仓库（只有一个harbor，多个库）／审计日志（啥时干啥）／告警
cpu／内存／磁盘／应用／容器／镜像数／审计日志（啥时干啥）／告警
应用／容器／负载均衡器／审计日志（啥时干啥）／告警
cpu／内存／调用成功失败
调用的方法。qps一秒钟查询响应次数 ms响应时间
2.api网关&amp;ndash;kong，中间件
kong 0.12.1
一个网关的基本功能有：统一接入、安全防护、协议适配、流量管控、长短链接支持、容错能力。
API网关更专注于安全、流量、路由等问题
技术选型
kong tyK zuul apiaxle: Nodejs 实现的一个 API 网关。 api-umbrella: Ruby
对比了几个开源项目觉得Mashape/kong和TykTechnologies/tyk 可以选用，从star数来看空占优支持性较好，
但是微服务过渡团队更多的会使用golang作为开发语言，个人更倾向于tyk。
tyk部分功能存在收费，闭源问题。
kong 有nginx作支持更有保障，安装简单，扩展性强一点
并且选择kong的人多过tyk。
可扩展性，Kong依赖一个数据库来实现配置存储，
依赖 serf 来实现 instance 之间的通信。
任何一个节点修改了其他节点会收到通知并重新reload配置。
模块化，Kong 可以方便地增加新的插件，并且插件可以通过 Restful API 进行管理 Kong采用插件机制进行功能定制，插件集（可以是0或n个）在API请求响应循环的生命周期中被执行。插件使用Lua编写，目前已有几个基础功能：HTTP基本认证、密钥认证、CORS（ Cross-origin Resource Sharing，跨域资源共享）、TCP、UDP、文件日志、API请求限流、请求转发以及nginx监控。
数量瓶颈
水平扩展多个Kong服务器，通过前置的负载均衡配置把请求均匀地分发到各个Server，来应对大批量的网络请求。
kong 集群将使得系统通过增加更多机器，从而实现水平扩展，承接更多的请求流量。它们将共享同样的配置且使用同一个数据库。kong 集群中的的所有节点都连接同一个数据库。
你需要在 kong 集群的上一层架设一个负载均衡的代理服务器，以便请求能够平均分散转发到 kong 的各个节点上。
考虑到性能原因，当 kong 代理请求的时候，为了避免频繁的数据库连接操作，kong 将会把以下 db 内容缓存到本机内存中。这些缓存包括：API定义，用户信息，插件信息，授权认证信息等。由于这些值在本机缓存中，通过 Admin api 去更新任何一个节点本地缓存中的值，都需要传播给其他节点。</description>
    </item>
    
    <item>
      <title>项目系列---- PaaS平台</title>
      <link>https://kingjcy.github.io/post/programe/paas/snpaas/</link>
      <pubDate>Tue, 18 Apr 2017 20:14:11 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/programe/paas/snpaas/</guid>
      <description>主要是苏宁容器云平台的建设
研发云 jenkins
基础云 java写的一个paas平台，在原来的虚拟机的paas平台上新增了一个虚拟化类型K8S。
K8s+docker
1、pod的资源分配问题？
一般生产会留有一定的配额，另外一台崩了，偏到其他机器上，没有资源就无法调度成功。正常调度成功，那就不超分，不超分就是安全的，只要超过应用分配是会被就会被killer掉。
宕机一般超过5分钟先设置成NotReady，之后才会进行漂移 默认的是大规模集群，宕机超过55%，偏移的速率会调低，你也可以通过参数来控制它不偏移
监控云 prometehtues
EFK</description>
    </item>
    
  </channel>
</rss>