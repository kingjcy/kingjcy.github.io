<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Compute on kingjcy blog</title>
    <link>https://kingjcy.github.io/tags/compute/</link>
    <description>Recent content in Compute on kingjcy blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>Copyright (c) 2020. All rights reserved.</copyright>
    <lastBuildDate>Wed, 02 Jan 2019 19:51:38 +0800</lastBuildDate>
    
	<atom:link href="https://kingjcy.github.io/tags/compute/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>云计算系列---- PaaS</title>
      <link>https://kingjcy.github.io/post/cloud/paas/paas/</link>
      <pubDate>Wed, 02 Jan 2019 19:51:38 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/cloud/paas/paas/</guid>
      <description>PaaS paas就是一个为应用提供自动化（部署，运维）的平台。
paas的定位 平台即服务（PaaS）与基础设施即服务（IaaS）是不同的，PaaS并不是IaaS的一个扩展特性，对于基础设施即服务（IaaS）来说，基础单元就是资源，这里的资源是指服务器，磁盘，网络等，IaaS所做的一切就是按照需要提供这些资源。例如，亚马逊（amazon）的EC2服务，所有的工具都以资源为中心，所有的文档都是关于资源的，所有的开发都是专注于资源，同时人们也因为需要这些资源而使用它。
对于平台即服务（PaaS）来说，基础单元就是应用。那么什么是应用？就是一个系统，就是代码以及所有那些在任何时候都与这些代码通信的服务。这不仅仅是资源，事实上，一个应用是由很多单独的资源绑定在一起组成的。将所有这些资源连接在一起所需要付出的工作量通常被低估了。从一个单一的运行Apache和Mysql的服务器转移到一个拥有单独的负载均衡服务器，缓存服务器，应用服务器，数据库服务器以及冗余的失效恢复的系统架构需要大量的工作，包括前期投入以及后期维护。一个成熟的PaaS平台可以为用户提供上述的所有功能，在减少用户大量工作的前提下，大幅度提升用户应用的开发速度，运行稳定性，可靠性，极大的降低了用户的开发，测试及运维的成本。
利用PaaS可以做的另外一件事，就是从应用的角度来管理IaaS。通常情况下，使用者对于IaaS的资源需求实质上是来源于运行在IaaS之上的应用，如何根据应用的需求动态的使用IaaS资源又成为摆在云使用者面前的一个难题，PaaS作为SaaS与IaaS的沟通者，可以根据SaaS的需求动态的协调IaaS资源，使IaaS按需分配资源的理念变得更智能，更有实际意义。
IaaS为云使用者提供了按需分配的能力，用户可以按照自己的需求定制计算资源，存储资源，网络资源，并且利用云端的海量资源随时快速的开启资源，并在工作完成时，随时释放资源，在享受云带来的高可靠性的同时，也最大化的降低了使用成本，提升了资源利用率。
但是IaaS为云使用者带来的便利只局限在资源这个层面上，云使用者可以快速，稳定，海量的使用资源，但是一旦获取到资源后，云使用者依然要为运行在资源之上的应用搭建各种适配环境（部署），解决应用的各种依赖，安装应用要使用的各种服务，维护应用的运行生命周期。这些问题IaaS都没有解决，或者说，这些问题本质上也不是IaaS需要解决的问题，而是PaaS需要解决的问题。
综上所述
1、IaaS关注于硬件的自动化管理，目标是人与机器的解耦合，提升了效率和性能。 2、PaaS关注于应用的自动化管理，目标是应用与操作系统的解耦合，提升了弹性和控制。在应用的角度，paas可以管理iaas。  PaaS的分类 我们需要了解一下PaaS平台自身的分类。Gartner把它们分为两类
一类是应用部署和运行平台APaaS（Application Platform As a Service） 一类是集成平台IPaaS（Integration Platform As a Service）。  APaaS是一种面向IT企业和机构的云计算应用开发与部署平台。APaaS主要为应用提供运行环境和数据存储，能够将本地部署的传统应用直接部署到APaaS上。
IPaaS是用于集成和协同的PaaS平台，不仅可以支持与现有云服务间的连接性，而且可以以安全的方式提供企业应用的访问能力。IPaaS主要用于集成和构建复合应用。
大数据厂商的PaaS实际上是属于IPaaS，而容器厂商和IaaS厂商的PaaS大致为APaaS。
APaaS的一般特性
大规模分布式系统：
完全模块化的分布式系统，保证云平台可靠性； 每个模块单独存在和运行，通过消息总线进行通讯； 系统耦合度低，便于弹性动态扩展；  弹性伸缩框架：
平台自身组件支持实时横向扩展; 根据应用的负载情况，动态加载应用实例； 应用实例支持实时水平扩展；  运维自动化：
日常运维操作简化; 故障自动恢复;  应用部署简单化：
一键式应用快速部署; 支持多种应用开发框架，包括Spring、.NET、Ruby on Rails，Node.js等; 通过buildpack扩展运行不同语言应用的能力;  支持多种服务：
支持多种数据服务，包括MySQL、mongodb、PostgreSQL等; 通过service broker组件扩展多种应用服务能力，包括数据库、中间件、缓存、云存储等。  主流PaaS平台架构及对比 了解了PaaS的分类，我们再来看看PaaS的具体技术对比。由于IPaaS具有很强的业务属性，因此这里我们主要来看一下更通用的APaaS，也是目前被大家最多提起的。说到PaaS，相信很多人都会把他和容器、Docker关联起来。下面来看几张图：
  这张图很清晰的划分出了XaaS以及各种概念对应的平台。大家所熟知的容器平台在这里实际上是CaaS的一种。那么CaaS和PaaS有什么区别呢？我们接下来对比一下CaaS和PaaS里面最具代表性的两个平台：CaaS和CloudFoundry。
 Docker/CaaS
 Docker/CaaS 提供直接管理操作基础设施的性能，带来基础设施层面的灵活性。用户 通过直接操作容器可以更灵活的实现应用迁移、部署。但这个更加轻量的平台带来了用户学 习成本和使用复杂度的增加。
容器云平台的搭建只依托 Swarm/Mesos/K8s 等容器编排调度系统就可以实现，还需 要引入大量的第三方解决方案，例如日志、监控、网络等。这就意味着一定的试错成本，另 外第三方系统的成熟度发展不一，组成一套统一的云平台后进入生产环境的应用需要经过一 定周期的论证和验证。</description>
    </item>
    
    <item>
      <title>云计算系列---- 云计算概念</title>
      <link>https://kingjcy.github.io/post/cloud/compute/</link>
      <pubDate>Wed, 02 Jan 2019 19:51:38 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/cloud/compute/</guid>
      <description>&lt;p&gt;目前各种云端数据处理方式层出不穷，这边简单看一下。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>