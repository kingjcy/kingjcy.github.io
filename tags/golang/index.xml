<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on kingjcy blog</title>
    <link>https://kingjcy.github.io/tags/golang/</link>
    <description>Recent content in Golang on kingjcy blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>Copyright (c) 2020. All rights reserved.</copyright>
    <lastBuildDate>Mon, 24 Aug 2020 14:49:00 +0800</lastBuildDate>
    
	<atom:link href="https://kingjcy.github.io/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Golang使用系列---- channel</title>
      <link>https://kingjcy.github.io/post/golang/go-channel/</link>
      <pubDate>Mon, 24 Aug 2020 14:49:00 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/golang/go-channel/</guid>
      <description>&lt;p&gt;goroutine和channel是go语言的两大基石，这边主要来研究一下channel，&lt;a href=&#34;https://kingjcy.github.io/post/golang/go-goroutinechannel/&#34;&gt;goroutine可以查看这里&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;channel核心设计思想：不是通过共享内存来通信，而是通过通信来共享内存。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Golang使用系列---- Goroutine</title>
      <link>https://kingjcy.github.io/post/golang/go-goroutinechannel/</link>
      <pubDate>Sun, 24 May 2020 14:49:00 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/golang/go-goroutinechannel/</guid>
      <description>&lt;p&gt;goroutine和channel是go语言的两大基石，这边主要来研究一下goroutine，&lt;a href=&#34;https://kingjcy.github.io/post/golang/go-channel/&#34;&gt;channel可以查看这里&lt;/a&gt;。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>golang使用系列---- net/http/pprof</title>
      <link>https://kingjcy.github.io/post/golang/go-net-http-pporf/</link>
      <pubDate>Thu, 26 Dec 2019 17:06:13 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/golang/go-net-http-pporf/</guid>
      <description>&lt;p&gt;golang 开发过程进行性能调优，pprof 一定是一个大杀器般的工具。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Golang使用系列---- Net/Http 应用层</title>
      <link>https://kingjcy.github.io/post/golang/go-net-http/</link>
      <pubDate>Thu, 26 Sep 2019 17:05:22 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/golang/go-net-http/</guid>
      <description>&lt;p&gt;http包提供了HTTP协议的客户端和服务端的实现。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Golang使用系列---- Gc</title>
      <link>https://kingjcy.github.io/post/golang/go-gc/</link>
      <pubDate>Tue, 27 Aug 2019 16:26:15 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/golang/go-gc/</guid>
      <description>&lt;p&gt;以下是Golang GC算法的里程碑：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;v1.1 STW（停止所有运行时）
v1.3 Mark（标记） STW（停止所有运行时）, Sweep（清除） 并行
v1.5 三色标记法
v1.8 三色标记法 + hybrid write barrier（混合屏障）
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Golang使用系列---- Runtime</title>
      <link>https://kingjcy.github.io/post/golang/go-runtime/</link>
      <pubDate>Thu, 13 Jun 2019 19:39:34 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/golang/go-runtime/</guid>
      <description>&lt;p&gt;尽管 Go 编译器产生的是本地可执行代码，这些代码仍旧运行在 Go 的 runtime（这部分的代码可以在 runtime 包中找到）当中。这个 runtime 类似 Java 和 .NET 语言所用到的虚拟机，它负责管理包括内存分配、垃圾回收、栈处理、goroutine、channel、切片（slice）、map 和反射（reflection）等等。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Golang使用系列---- Concurrence</title>
      <link>https://kingjcy.github.io/post/golang/go-concurrence/</link>
      <pubDate>Tue, 26 Mar 2019 11:05:34 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/golang/go-concurrence/</guid>
      <description>&lt;p&gt;并发编程是我们计算机技术中最常用的一种编程技术,是一种基于多元程序的一种应用。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>golang使用系列---- go基本使用积累</title>
      <link>https://kingjcy.github.io/post/golang/go/</link>
      <pubDate>Sat, 23 Mar 2019 14:54:09 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/golang/go/</guid>
      <description>&lt;p&gt;学习使用go语言已经有一段时间了，积累了很多的经验，这边进行不断接触的知识点进行零散的整理并持续积累，也便于后期的备忘。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Golang使用系列---- Map</title>
      <link>https://kingjcy.github.io/post/golang/go-map/</link>
      <pubDate>Thu, 28 Feb 2019 17:42:24 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/golang/go-map/</guid>
      <description>&lt;p&gt;map是我们经常使用的一种数据结构，也是很重要的一种数据结构，我们来详细的了解一下map。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Golang使用系列---- Sync</title>
      <link>https://kingjcy.github.io/post/golang/go-sync/</link>
      <pubDate>Thu, 28 Feb 2019 17:42:24 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/golang/go-sync/</guid>
      <description>&lt;p&gt;sync包提供了基本的同步基元，如锁，WaitGroup、Once 和 Cond等同步原语。除了Once和WaitGroup类型，大部分都是适用于普通程序线程，大型并发同步使用channel通信（csp）更好一些。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Golang使用系列---- mutex</title>
      <link>https://kingjcy.github.io/post/golang/go-mutex/</link>
      <pubDate>Thu, 28 Feb 2019 17:42:24 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/golang/go-mutex/</guid>
      <description>&lt;p&gt;锁是一种常见的并发控制技术，我们一般会将锁分成乐观锁和悲观锁，即乐观并发控制和悲观并发控制。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Golang使用系列---- Sort</title>
      <link>https://kingjcy.github.io/post/golang/go-sort/</link>
      <pubDate>Fri, 01 Feb 2019 11:54:17 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/golang/go-sort/</guid>
      <description>&lt;p&gt;golang中也实现了排序算法的包sort包．&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Golang使用系列---- Math</title>
      <link>https://kingjcy.github.io/post/golang/go-math/</link>
      <pubDate>Fri, 01 Feb 2019 11:37:51 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/golang/go-math/</guid>
      <description>&lt;p&gt;math包实现的就是数学函数计算。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Golang使用系列---- Bufio</title>
      <link>https://kingjcy.github.io/post/golang/go-bufio/</link>
      <pubDate>Tue, 25 Dec 2018 14:27:45 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/golang/go-bufio/</guid>
      <description>&lt;p&gt;bufio 包实现了缓存IO。它包装了 io.Reader 和 io.Writer 对象，创建了另外的Reader和Writer对象，它们也实现了 io.Reader 和 io.Writer 接口，不过它们是有缓存的。该包同时为文本I/O提供了一些便利操作。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Golang使用系列---- Syscall</title>
      <link>https://kingjcy.github.io/post/golang/go-syscall/</link>
      <pubDate>Tue, 25 Dec 2018 14:04:07 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/golang/go-syscall/</guid>
      <description>&lt;p&gt;标准库syscall给这些系统调用做了不错的封装，不少常用的系统调用已经可以像普通函数一样直接调用，但是大部分使用起来都比较陌生。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Golang使用系列---- Go Context</title>
      <link>https://kingjcy.github.io/post/golang/go-context/</link>
      <pubDate>Wed, 06 Jun 2018 11:02:37 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/golang/go-context/</guid>
      <description>&lt;p&gt;控制并发有两种经典的方式，一种是WaitGroup，另外一种就是Context，当然还可以简单的直接用channel通知。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Golang使用系列---- Ioutil</title>
      <link>https://kingjcy.github.io/post/golang/go-ioutil/</link>
      <pubDate>Sat, 13 Jan 2018 11:04:07 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/golang/go-ioutil/</guid>
      <description>&lt;p&gt;ioutil主要是提供了一些常用、方便的IO操作函数。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Golang使用系列---- Bytes</title>
      <link>https://kingjcy.github.io/post/golang/go-bytes/</link>
      <pubDate>Mon, 25 Dec 2017 14:28:17 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/golang/go-bytes/</guid>
      <description>&lt;p&gt;该包定义了一些操作 byte slice 的便利操作。因为字符串可以表示为 []byte，因此，bytes 包定义的函数、方法等和 strings 包很类似，所以讲解时会和 strings 包类似甚至可以直接参考。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Golang使用系列---- Archive</title>
      <link>https://kingjcy.github.io/post/golang/go-archive/</link>
      <pubDate>Mon, 25 Dec 2017 14:26:01 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/golang/go-archive/</guid>
      <description>&lt;p&gt;archive就是使用tar和zip两种方式对文档进行归档，压缩看compress包。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Golang使用系列---- Compress</title>
      <link>https://kingjcy.github.io/post/golang/go-compress/</link>
      <pubDate>Sun, 29 Jan 2017 10:39:28 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/golang/go-compress/</guid>
      <description>&lt;p&gt;archive一般用于打包，compress一般用于压缩。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Golang使用系列---- DesignPatterns</title>
      <link>https://kingjcy.github.io/post/golang/designpatterns/</link>
      <pubDate>Sat, 28 Jan 2017 16:33:01 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/golang/designpatterns/</guid>
      <description>&lt;p&gt;设计模式其实和语言关系不大，但是在项目工程的设计中有着很大的作用，这边使用golang实现相关的设计模式，也算是对过去看过用过的设计模式的回顾和总结。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Golang使用系列---- Strings</title>
      <link>https://kingjcy.github.io/post/golang/go-strings/</link>
      <pubDate>Wed, 12 Oct 2016 19:37:30 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/golang/go-strings/</guid>
      <description>&lt;p&gt;平时在开发过程中， 和字符串打交道还是比较多的，比如分割， 去除， 替换等等常用的方法， 这些都是由strings包来提供的。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Golang使用系列---- Strconv</title>
      <link>https://kingjcy.github.io/post/golang/go-strconv/</link>
      <pubDate>Wed, 12 Oct 2016 19:33:24 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/golang/go-strconv/</guid>
      <description>&lt;p&gt;strconv包实现了基本数据类型和其字符串表示的相互转换。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Golang使用系列---- Io</title>
      <link>https://kingjcy.github.io/post/golang/go-io/</link>
      <pubDate>Sat, 30 Jul 2016 20:39:03 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/golang/go-io/</guid>
      <description>&lt;p&gt;io包提供了所有需要交互的输入输出模式的基础。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Golang使用系列---- Go Net 协议层</title>
      <link>https://kingjcy.github.io/post/golang/go-net/</link>
      <pubDate>Mon, 11 Jul 2016 17:34:34 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/golang/go-net/</guid>
      <description>&lt;p&gt;网络编程是go语言使用的一个核心模块。golang的网络封装使用对于底层socket或者上层的http，甚至是web服务都很友好。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Golang使用系列----  Builtin</title>
      <link>https://kingjcy.github.io/post/golang/go-builtin/</link>
      <pubDate>Tue, 28 Jun 2016 20:36:55 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/golang/go-builtin/</guid>
      <description>&lt;p&gt;builtin包是go的预声明定义，包括go语言中常用的各种类型和方法声明，包括变量和常量两部分．&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Golang使用系列---- Os</title>
      <link>https://kingjcy.github.io/post/golang/go-os/</link>
      <pubDate>Thu, 02 Jun 2016 09:52:35 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/golang/go-os/</guid>
      <description>&lt;p&gt;os包中实现了不依赖平台的操作系统函数接口(平台无关的接口)，设计向Unix风格，但是错误处理是go风格，当os包使用时，如果失败之后返回错误类型而不是错误数量,返回错误值而非错误码,可以包含更多信息。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Golang使用系列---- Fmt</title>
      <link>https://kingjcy.github.io/post/golang/go-fmt/</link>
      <pubDate>Mon, 30 May 2016 11:57:05 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/golang/go-fmt/</guid>
      <description>&lt;p&gt;fmt是实现了格式化的I/O函数，这点类似Ｃ语言中的printf和scanf，但是更加简单。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Golang使用系列---- flag</title>
      <link>https://kingjcy.github.io/post/golang/go-flag/</link>
      <pubDate>Sun, 29 May 2016 10:09:03 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/golang/go-flag/</guid>
      <description>&lt;p&gt;golang自身带的命令行包flag，各种case，有代码洁癖的人看着就令人头大,我们一般使用其他的命令行解析包比如pflag，cobra等，cobra是个非常不错的命令行包(golang命令行解析库)，docker，hugo都在使用.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Golang使用系列---- Clinet</title>
      <link>https://kingjcy.github.io/post/golang/go-clinet/</link>
      <pubDate>Sun, 24 Apr 2016 14:50:29 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/golang/go-clinet/</guid>
      <description>&lt;p&gt;go命令行工具是我们在写代码中常用的，我们这边做一个简单的整理。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>golang使用系列---- Time</title>
      <link>https://kingjcy.github.io/post/golang/go-time/</link>
      <pubDate>Tue, 12 Apr 2016 20:11:01 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/golang/go-time/</guid>
      <description>&lt;p&gt;time包中包括两类时间：时间点（某一时刻）和时长（某一段时间）的基本操作。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>