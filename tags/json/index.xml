<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Json on kingjcy blog</title>
    <link>https://kingjcy.github.io/tags/json/</link>
    <description>Recent content in Json on kingjcy blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>Copyright (c) 2020. All rights reserved.</copyright>
    <lastBuildDate>Tue, 19 Apr 2016 09:38:40 +0800</lastBuildDate>
    
	<atom:link href="https://kingjcy.github.io/tags/json/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Json的基本使用</title>
      <link>https://kingjcy.github.io/post/standard/json/</link>
      <pubDate>Tue, 19 Apr 2016 09:38:40 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/standard/json/</guid>
      <description>JSON(JavaScript Object Notation, JS 对象标记) 是一种轻量级的数据交换格式。轻量级主要体现在占有空间小，相比于xml更加简洁。它基于 ECMAScript (w3c制定的js规范)的一个子集，采用完全独立于编程语言的文本格式来存储和表示数据。简洁和清晰的层次结构使得 JSON 成为理想的数据交换语言。 易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率。
常用实例 新建一个文件名为conf.json，键入内容：
{ &amp;quot;enabled&amp;quot;: true, &amp;quot;path&amp;quot;: &amp;quot;/usr/local&amp;quot; }  新建main.go，键入内容：
package main import ( &amp;quot;encoding/json&amp;quot; &amp;quot;fmt&amp;quot; &amp;quot;os&amp;quot; ) type configuration struct { Enabled bool Path string } func main() { file, _ := os.Open(&amp;quot;conf.json&amp;quot;) defer file.Close() decoder := json.NewDecoder(file) conf := configuration{} err := decoder.Decode(&amp;amp;conf) if err != nil { fmt.Println(&amp;quot;Error:&amp;quot;, err) } fmt.Println(conf.Path) }  通在上面的示例代码中，我们首先定义了与json数据对应的结构体，数组对应slice，字段名对应JSON里面的KEY，具体看下面的json的三种类型。
在解析的时候，如何将json数据与struct字段相匹配呢?例如JSON的key是Foo，那么怎么找对应的字段呢?</description>
    </item>
    
  </channel>
</rss>