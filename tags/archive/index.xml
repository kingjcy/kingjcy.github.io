<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Archive on kingjcy blog</title>
    <link>https://kingjcy.github.io/tags/archive/</link>
    <description>Recent content in Archive on kingjcy blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>Copyright (c) 2020. All rights reserved.</copyright>
    <lastBuildDate>Mon, 25 Dec 2017 14:26:01 +0800</lastBuildDate>
    
	<atom:link href="https://kingjcy.github.io/tags/archive/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>golang使用系列---- Archive</title>
      <link>https://kingjcy.github.io/post/golang/go-archive/</link>
      <pubDate>Mon, 25 Dec 2017 14:26:01 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/golang/go-archive/</guid>
      <description>archive就是使用tar和zip两种方式对文档进行归档。压缩看compress包。
 tar和zip有什么不同
 二者使用平台不同，对于 Windows 平台而言，最常用的格式是 zip 和 rar，国内大多数是用 rar，国外大多数是用 zip。而对于类 Unix 平台而言，常用的格式是 tar 和 tar.gz，zip 比较少一些，rar 则几乎没有。
zip 格式是开放且免费的，所以广泛使用在 Windows、Linux、MacOS 平台，要说 zip 有什么缺点的话，就是它的压缩率并不是很高，不如 rar及 tar.gz 等格式。
严格的说，tar 只是一种打包格式，并不对文件进行压缩，主要是为了便于文件的管理，所以打包后的文档大小一般远远大于 zip 和 tar.gz，但这种格式也有很明显的优点，例如打包速度非常快，打包时 CPU 占用率也很低，因为不需要压缩嘛。
archive/tar 单个文件操作 这个非常简单，就是读取一个文件，进行打包及解包操作即可。
1.单个文件打包
从 /etc/passwd 下复制了一个 passwd 文件到当前目录下，用来做压缩测试。什么文件都是可以的，自己随意写一个也行。这里的示例主要为了说明 tar ，没有处理路径，所以过程全部假设是在当前目录下执行。
cp /etc/passwd .  关于文件的打包直接查看示例代码，已经在示例代码中做了详细的注释。
package main import ( &amp;quot;os&amp;quot; &amp;quot;log&amp;quot; &amp;quot;archive/tar&amp;quot; &amp;quot;fmt&amp;quot; &amp;quot;io&amp;quot; ) func main() { // 准备打包的源文件 var srcFile = &amp;quot;passwd&amp;quot; // 打包后的文件 var desFile = fmt.</description>
    </item>
    
  </channel>
</rss>