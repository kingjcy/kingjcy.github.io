<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Net Communication on kingjcy blog</title>
    <link>https://kingjcy.github.io/tags/net-communication/</link>
    <description>Recent content in Net Communication on kingjcy blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>Copyright (c) 2020. All rights reserved.</copyright>
    <lastBuildDate>Tue, 28 Apr 2015 20:16:11 +0800</lastBuildDate>
    
	<atom:link href="https://kingjcy.github.io/tags/net-communication/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>计算机网络系列---- 网络通信</title>
      <link>https://kingjcy.github.io/post/middleware/io/netcomminicate/</link>
      <pubDate>Tue, 28 Apr 2015 20:16:11 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/middleware/io/netcomminicate/</guid>
      <description>多进程 -&amp;gt; 多线程 -&amp;gt; 线程池-&amp;gt; select/poll -&amp;gt; epoll(I/O多路复用)
ipv4套接字结构 struct sockaddr_in{ uint8_t sin_len; &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;结构体长度 sa_family_t sin_family; &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;地址家族 AF_INET&amp;mdash;IPV4 AF_INET6&amp;ndash;IPV6 in_port_t sin_port; &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;端口 struct in_addr sin_addr; &amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;ip地址，这个结构体只有这一个成员，无符号的32位 char sin_zero[8]; &amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;暂不使用 };
&amp;mdash;》 通用套接字结构 struct sockaddR{ uint8_t sin_len; &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;结构体长度 sa_family_t sin_family; &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;地址家族 AF_INET&amp;mdash;IPV4 char * sa_date[14] &amp;mdash;&amp;mdash;&amp;mdash;14个字节和ipv4里的后三个字节一样 };
字节序： 最高有效位存储于最低内存地址处&amp;mdash;&amp;ndash;》大 网络字节序是大端字节序。
字节序转换函数： uint32_t htonl(uint32_t hostlong) uint16_t htons(uint16_t hostlong) uint32_t ntohl(uint32_t hostlong) uint16_t ntohs(uint16_t hostlong) &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-n==net h=host l==long s==short
地址转换函数： in_addr_t inet_addr（const char *cp） &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-16位十进制地址转化为32位二进制地址 int inet_aton(const char *cp,struct in_addr inp) &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-16位十进制地址转化为32位二进制地址 char inet_ntoa(struct in_addr in) &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-32位二进制地址转化为16位十进制地址</description>
    </item>
    
  </channel>
</rss>