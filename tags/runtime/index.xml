<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Runtime on kingjcy blog</title>
    <link>https://kingjcy.github.io/tags/runtime/</link>
    <description>Recent content in Runtime on kingjcy blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>Copyright (c) 2020. All rights reserved.</copyright>
    <lastBuildDate>Fri, 29 May 2020 20:12:53 +0800</lastBuildDate>
    
	<atom:link href="https://kingjcy.github.io/tags/runtime/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>云计算K8s组件系列—- 容器运行时CRI</title>
      <link>https://kingjcy.github.io/post/cloud/paas/base/kubernetes/k8s-cri/</link>
      <pubDate>Fri, 29 May 2020 20:12:53 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/cloud/paas/base/kubernetes/k8s-cri/</guid>
      <description>&lt;p&gt;CRI就是kubelet 把对容器的操作，统一地抽象成一个接口。这样，kubelet 就只需要跟这个接口打交道了。而作为具体的容器项目，比如 Docker、 rkt、runV，它们就只需要自己提供一个该接口的实现，然后对 kubelet 暴露出 gRPC 服务即可。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Golang使用系列---- Runtime</title>
      <link>https://kingjcy.github.io/post/golang/go-runtime/</link>
      <pubDate>Thu, 13 Jun 2019 19:39:34 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/golang/go-runtime/</guid>
      <description>&lt;p&gt;尽管 Go 编译器产生的是本地可执行代码，这些代码仍旧运行在 Go 的 runtime（这部分的代码可以在 runtime 包中找到）当中。这个 runtime 类似 Java 和 .NET 语言所用到的虚拟机，它负责管理包括内存分配、垃圾回收、栈处理、goroutine、channel、切片（slice）、map 和反射（reflection）等等。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>