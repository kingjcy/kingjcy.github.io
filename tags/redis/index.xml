<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Redis on kingjcy blog</title>
    <link>https://kingjcy.github.io/tags/redis/</link>
    <description>Recent content in Redis on kingjcy blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>Copyright (c) 2020. All rights reserved.</copyright>
    <lastBuildDate>Thu, 21 Feb 2019 15:10:33 +0800</lastBuildDate>
    
	<atom:link href="https://kingjcy.github.io/tags/redis/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Redis_exporter</title>
      <link>https://kingjcy.github.io/post/monitor/prometheus/exporter/redis_exporter/</link>
      <pubDate>Thu, 21 Feb 2019 15:10:33 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/monitor/prometheus/exporter/redis_exporter/</guid>
      <description>&lt;p&gt;这边主要是对redis探针的源码原理进行记录，便于后面使用查看&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Redis_cluster</title>
      <link>https://kingjcy.github.io/post/database/redis/redis_cluster/</link>
      <pubDate>Thu, 23 Feb 2017 15:54:28 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/database/redis/redis_cluster/</guid>
      <description>&lt;p&gt;redis基本上有三种使用方式：standalone，cluster，sentinel。下面进行一些总结。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>redis系列---- redis集群的原理</title>
      <link>https://kingjcy.github.io/post/database/redis/redis_cluster_principle/</link>
      <pubDate>Sun, 12 Feb 2017 16:55:06 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/database/redis/redis_cluster_principle/</guid>
      <description>&lt;p&gt;自从研究了redis的监控工具之后，对于redis的集群实现方案又回头做了一个系统的研究。&lt;/p&gt;

&lt;p&gt;首先，先说一下redis，是一个高性能的key-value类型的NoSQL数据库，支持较为丰富的数据类型，单机Redis在普通的服务器上通常ops上限在5w左右，开启pipeline的情况下在20-30w左右。对于大多数中小公司来说，通常单机的Redis已经足够，最多根据不同业务分散到多台Redis。但是随着数据的越来越多，也迫切需求支持分布式集群。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Redis系列---- redis toturial</title>
      <link>https://kingjcy.github.io/post/database/redis/redis/</link>
      <pubDate>Sun, 22 Jan 2017 14:41:38 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/database/redis/redis/</guid>
      <description>&lt;p&gt;redis是一款高性能的key-value型数据库，目前受到了强烈的欢迎和广泛的使用。&lt;/p&gt;

&lt;p&gt;先来一副比较牛逼的图，简直涵盖了所有&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://kingjcy.github.io/media/database/redis/redis-all2&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://kingjcy.github.io/media/database/redis/redis-all&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Redis系列---- zset</title>
      <link>https://kingjcy.github.io/post/database/redis/redis-zset/</link>
      <pubDate>Sun, 22 Jan 2017 14:41:38 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/database/redis/redis-zset/</guid>
      <description>&lt;p&gt;ZSet数据结构类似于Set结构，只是ZSet结构中，每个元素都会有一个分值，然后所有元素按照分值的大小进行排列，相当于是一个进行了排序的链表。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Redis系列---- 布隆过滤器</title>
      <link>https://kingjcy.github.io/post/database/redis/bloomfilter/</link>
      <pubDate>Sun, 22 Jan 2017 14:41:38 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/database/redis/bloomfilter/</guid>
      <description>&lt;p&gt;如何避免海量数据需要查重，缓存穿透的情况的发生，使用布隆过滤器。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>mysql系列---- 前置缓存redis</title>
      <link>https://kingjcy.github.io/post/database/mysql/redis-mysql/</link>
      <pubDate>Sun, 22 Jan 2017 14:41:38 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/database/mysql/redis-mysql/</guid>
      <description>常规使用 1、基于binlog使用mysql_udf_redis，将数据库中的数据同步到Redis。
 无论MySQL还是Redis，自身都带有数据同步的机制，像比较常用的MySQL的Master/Slave模式，就是由Slave端分析Master的binlog来实现的，这样的数据其实还是一个异步过程，只不过当服务器都在同一内网时，异步的延迟几乎可以忽略。
 那么理论上我们也可以用同样方式，分析MySQL的binlog文件并将数据插入Redis。但是这需要对binlog文件以及MySQL有非常深入的理解，同时由于binlog存在Statement/Row/Mixedlevel多种形式，分析binlog实现同步的工作量是非常大的。
2、通过MySQL自动同步刷新Redis
 当我们在业务层有数据查询需求时，先到Redis缓存中查询，如果查不到，再到MySQL数据库中查询，同时将查到的数据更新到Redis里；当我们在业务层有修改插入数据需求时，直接向MySQL发起请求，同时更新Redis缓存。 就是MySQL的CRUD发生后自动地更新到Redis里，这需要通过MySQL UDF来实现。具体来说，我们把更新Redis的逻辑放到MySQL中去做，即定义一个触发器Trigger，监听CRUD这些操作，当操作发生后，调用对应的UDF函数，远程写回Redis，所以业务逻辑只需要负责更新MySQL就行了，剩下的交给MySQL UDF去完成。
 总结
 在我们的实际开发当中往往采用如下方式实现实现Mysql和Redis数据同步：当我们在MySQL数据库中进行增删改的时候，我们在增删改的service层将缓存中的数据清除，这个时候用户在此请求的时候我们缓存中没有数据了，直接去数据库中查询，查询回来之后将缓存中的数据放缓存当中，这个时候缓存中的数据就是最新的数据。
实战 promes后台服务器信息查询
1、后台重kafka订阅信息，如果有服务器信息，后台系统进行消费，放入到mysql数据库中
2、很多场景都需要查询服务器的信息，比如我们接受到的zbabix的数据，需要根据ip的去查询服务器的信息
3、这边在查询之间就加了一层redis缓存，先去redis缓存查数据，如果查到数据，就返回，如果没有查到数据就到mysql数据库进行查询，将查到的数据返回的同时更新到redis中，key是IP，json信息是value，同时设置过期事件，用来保存经常查询的数据。</description>
    </item>
    
  </channel>
</rss>