<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Http on kingjcy blog</title>
    <link>https://kingjcy.github.io/tags/http/</link>
    <description>Recent content in Http on kingjcy blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>Copyright (c) 2020. All rights reserved.</copyright>
    <lastBuildDate>Wed, 26 Sep 2018 17:06:13 +0800</lastBuildDate>
    
	<atom:link href="https://kingjcy.github.io/tags/http/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>golang使用系列---- net/http/pprof</title>
      <link>https://kingjcy.github.io/post/golang/go-net-http-pporf/</link>
      <pubDate>Wed, 26 Sep 2018 17:06:13 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/golang/go-net-http-pporf/</guid>
      <description>PProf 想要进行性能优化，首先瞩目在 Go 自身提供的工具链来作为分析依据，本文将带你学习、使用 Go 后花园，涉及如下：
runtime/pprof：采集程序（非 Server）的运行数据进行分析 net/http/pprof：采集 HTTP Server 的运行时数据进行分析  其实net/http/pprof中只是使用runtime/pprof包来进行封装了一下，并在http端口上暴露出来
原理 pprof 是用于可视化和分析性能分析数据的工具
pprof 以 profile.proto 读取分析样本的集合，并生成报告以可视化并帮助分析数据（支持文本和图形报告）
profile.proto 是一个 Protocol Buffer v3 的描述文件，它描述了一组 callstack 和 symbolization 信息， 作用是表示统计分析的一组采样的调用栈，是很常见的 stacktrace 配置文件格式
使用 支持什么使用模式
Report generation：报告生成 Interactive terminal use：交互式终端使用 Web interface：Web 界面  可以做什么
CPU Profiling：CPU 分析，按照一定的频率采集所监听的应用程序 CPU（含寄存器）的使用情况，可确定应用程序在主动消耗 CPU 周期时花费时间的位置 Memory Profiling：内存分析，在应用程序进行堆分配时记录堆栈跟踪，用于监视当前和历史内存使用情况，以及检查内存泄漏 Block Profiling：阻塞分析，记录 goroutine 阻塞等待同步（包括定时器通道）的位置 Mutex Profiling：互斥锁分析，报告互斥锁的竞争情况  实例 我们将编写一个简单且有点问题的例子，用于基本的程序初步分析
package main import ( &amp;quot;log&amp;quot; &amp;quot;net/http&amp;quot; _ &amp;quot;net/http/pprof&amp;quot; &amp;quot;github.</description>
    </item>
    
    <item>
      <title>Go Server</title>
      <link>https://kingjcy.github.io/post/golang/go-server/</link>
      <pubDate>Mon, 26 Feb 2018 17:23:40 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/golang/go-server/</guid>
      <description>&lt;p&gt;基于go-net的http协议和go-rpc的协议实现服务器框架&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rest</title>
      <link>https://kingjcy.github.io/post/middleware/network/application-netprotocol/rest/</link>
      <pubDate>Sun, 05 Mar 2017 21:03:11 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/middleware/network/application-netprotocol/rest/</guid>
      <description>&lt;p&gt;REST &amp;ndash; REpresentational State Transfer 直接翻译：表现层状态转移。&lt;/p&gt;

&lt;p&gt;REST只是一组关于如何使用HTTP的规则规范，或者是一种设计风格，但并不是一个标准,只是提倡我们使用，所以业内认为REST是我们都应该使用HTTP的方式。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Resource：资源，即数据。
Representational：某种表现形式，比如用JSON，XML，JPEG等；
State Transfer：状态变化。通过HTTP动词实现。
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>计算机网络系列---- Http/https</title>
      <link>https://kingjcy.github.io/post/middleware/network/http/</link>
      <pubDate>Mon, 13 Jun 2016 20:42:55 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/middleware/network/http/</guid>
      <description>当今web程序的开发技术真是百家争鸣，ASP.NET, PHP, JSP，Perl, AJAX 等等。 无论Web技术在未来如何发展，理解Web程序之间通信的基本协议相当重要， 因为它让我们理解了Web应用程序的内部工作.
http是网络的最基本协议，使用Fiddler工具非常方便地捕获HTTP Request和HTTP Response。
基本概念 各种协议 尽管我们会单独讲解其他协议，比如tcp/ip，但是讲解http肯定是离不开这些协议的。
tcp/ip数据传输方式
利用tcp/ip协议族通讯时，通过分层顺序通讯。
发送端从应用层往下走，接收端从应用层往上走 发送端每经过一层都会被打上该层所属的首部信息，接收端每经过一层将把首部去掉  http在应用层决定了向用户提供应用服务时通讯的活动 应用层包括：FTP，DNS，HTTP等
各种协议的关系
1、DNS协议是应用层协议作用是提供域名到ip地址之间的解析服务
2、TCP协议位于传输层 作用是提供可靠的字节流服务
字节流服务：将大块数据分割成以报文段为单位的数据包 可靠：采用三次握手策略  3、ip位于网络层作用是把各种数据包传送给对方
确保传送正确的两个条件
IP地址：指明了节点被分配到的地址。可变。 MAC地址：网卡所属的固定地址。不可变。  4、http协议和tcp协议的区别与联系
区别
所属协议层不同：tcp属于传输层，http属于应用层 职责不同：tcp解决数据传输问题，http解决数据包装问题  联系
http协议是构建在tcp协议之上的 打个比方：ip是高速公路，tcp是跑在高速公路上的卡车，http是卡车里面的包裹  5、URL与URI
URL：统一资源定位符，资源的地址。是URI的子集 URI：统一资源标识符，用字符串标识某一互联网资源  URI的格式
web web理念：文档之间相关关联，连成可相互参阅的万维网（www）
web互连（通讯）的基础：tcp/ip协议族，http属于它内部的子集
web（www）的三项构建技术：
html：页面使用什么语言展示 URL：页面在什么位置 http：文档之间传递的协议是什么  Web服务器，浏览器，代理服务器 当我们打开浏览器，在地址栏中输入URL，然后我们就看到了网页。 原理是怎样的呢？
实际上我们输入URL后，我们的浏览器给Web服务器发送了一个Request, Web服务器接到Request后进行处理，生成相应的Response，然后发送给浏览器， 浏览器解析Response中的HTML,这样我们就看到了网页，过程如下图所示
client&amp;lt;----------&amp;gt;server  我们的Request 有可能是经过了代理服务器，最后才到达Web服务器的。 client&amp;lt;----------&amp;gt;proxy&amp;lt;-----------&amp;gt;server  代理服务器就是网络信息的中转站，有什么功能呢？
 提高访问速度， 大多数的代理服务器都有缓存功能。 突破限制， 也就是翻墙了 隐藏身份。  http 什么是HTTP协议 超文本传输协议(HTTP)是一种通信协议，是指计算机通信网络中两台计算机之间进行通信所必须共同遵守的规定或规则，它允许将超文本标记语言(HTML)文档从Web服务器传送到客户端的浏览器</description>
    </item>
    
  </channel>
</rss>