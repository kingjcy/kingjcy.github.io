<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kong on kingjcy blog</title>
    <link>https://kingjcy.github.io/tags/kong/</link>
    <description>Recent content in Kong on kingjcy blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>Copyright (c) 2020. All rights reserved.</copyright>
    <lastBuildDate>Thu, 17 Aug 2017 20:17:25 +0800</lastBuildDate>
    
	<atom:link href="https://kingjcy.github.io/tags/kong/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Kong</title>
      <link>https://kingjcy.github.io/post/apigateway/kong/</link>
      <pubDate>Thu, 17 Aug 2017 20:17:25 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/apigateway/kong/</guid>
      <description>kong tyK zuul apiaxle: Nodejs 实现的一个 API 网关。 api-umbrella: Ruby
对比了几个开源项目觉得Mashape/kong和TykTechnologies/tyk 可以选用，从star数来看空占优支持性较好，
但是微服务过渡团队更多的会使用golang作为开发语言，个人更倾向于tyk。
tyk部分功能存在收费，闭源问题。
kong 有nginx作支持更有保障，安装简单，扩展性强一点
并且选择kong的人多过tyk。
可扩展性，Kong依赖一个数据库来实现配置存储，
依赖 serf 来实现 instance 之间的通信。
任何一个节点修改了其他节点会收到通知并重新reload配置。
模块化，Kong 可以方便地增加新的插件，并且插件可以通过 Restful API 进行管理 Kong采用插件机制进行功能定制，插件集（可以是0或n个）在API请求响应循环的生命周期中被执行。插件使用Lua编写，目前已有几个基础功能：HTTP基本认证、密钥认证、CORS（ Cross-origin Resource Sharing，跨域资源共享）、TCP、UDP、文件日志、API请求限流、请求转发以及nginx监控。
数量瓶颈
水平扩展多个Kong服务器，通过前置的负载均衡配置把请求均匀地分发到各个Server，来应对大批量的网络请求。
消息转发
透传过去
用户鉴权
调用鉴权模块的api
流量控制
在过滤器的run方法中判断请求剩余次数，小于0就拦截请求：
熔断
熔断关闭: 熔断关闭不会对服务进行熔断，当请求服务失败次数符合设定的规则则进入熔断机制 半熔断： 部分请求根据规则调用当前服务，如果请求成功且符合规则则认为当前服务恢复正常，关闭熔断； 熔断打开：请求不再进行调用当前服务，内部设置时钟一般为(MTTR：平均故障处理时间)，当打开时长达到所设时钟则进入半熔断状态。 基于服务策略触发
安装部署
rpm -ivh kong-community-edition-0.12.1.el7.noarch.rpm 包请至官方源进行下载。
rpm直接安装
修改配置文件
cp /etc/kong/kong.conf.default /etc/kong.conf
vi /etc/kong.conf proxy_listen = 0.0.0.0:8000 # Address and port on which Kong will accept # HTTP requests.</description>
    </item>
    
  </channel>
</rss>