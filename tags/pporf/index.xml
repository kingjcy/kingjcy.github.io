<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pporf on kingjcy blog</title>
    <link>https://kingjcy.github.io/tags/pporf/</link>
    <description>Recent content in Pporf on kingjcy blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>Copyright (c) 2020. All rights reserved.</copyright>
    <lastBuildDate>Wed, 26 Sep 2018 17:06:13 +0800</lastBuildDate>
    
	<atom:link href="https://kingjcy.github.io/tags/pporf/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>golang使用系列---- net/http/pprof</title>
      <link>https://kingjcy.github.io/post/golang/go-net-http-pporf/</link>
      <pubDate>Wed, 26 Sep 2018 17:06:13 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/golang/go-net-http-pporf/</guid>
      <description>PProf 想要进行性能优化，首先瞩目在 Go 自身提供的工具链来作为分析依据，本文将带你学习、使用 Go 后花园，涉及如下：
runtime/pprof：采集程序（非 Server）的运行数据进行分析 net/http/pprof：采集 HTTP Server 的运行时数据进行分析  其实net/http/pprof中只是使用runtime/pprof包来进行封装了一下，并在http端口上暴露出来
原理 pprof 是用于可视化和分析性能分析数据的工具
pprof 以 profile.proto 读取分析样本的集合，并生成报告以可视化并帮助分析数据（支持文本和图形报告）
profile.proto 是一个 Protocol Buffer v3 的描述文件，它描述了一组 callstack 和 symbolization 信息， 作用是表示统计分析的一组采样的调用栈，是很常见的 stacktrace 配置文件格式
使用 支持什么使用模式
Report generation：报告生成 Interactive terminal use：交互式终端使用 Web interface：Web 界面  可以做什么
CPU Profiling：CPU 分析，按照一定的频率采集所监听的应用程序 CPU（含寄存器）的使用情况，可确定应用程序在主动消耗 CPU 周期时花费时间的位置 Memory Profiling：内存分析，在应用程序进行堆分配时记录堆栈跟踪，用于监视当前和历史内存使用情况，以及检查内存泄漏 Block Profiling：阻塞分析，记录 goroutine 阻塞等待同步（包括定时器通道）的位置 Mutex Profiling：互斥锁分析，报告互斥锁的竞争情况  实例 我们将编写一个简单且有点问题的例子，用于基本的程序初步分析
package main import ( &amp;quot;log&amp;quot; &amp;quot;net/http&amp;quot; _ &amp;quot;net/http/pprof&amp;quot; &amp;quot;github.</description>
    </item>
    
  </channel>
</rss>