<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Network on kingjcy blog</title>
    <link>https://kingjcy.github.io/tags/network/</link>
    <description>Recent content in Network on kingjcy blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>Copyright (c) 2020. All rights reserved.</copyright>
    <lastBuildDate>Mon, 19 Sep 2016 15:42:28 +0800</lastBuildDate>
    
	<atom:link href="https://kingjcy.github.io/tags/network/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>计算机网络系列---- Ip</title>
      <link>https://kingjcy.github.io/post/middleware/network/ip/</link>
      <pubDate>Mon, 19 Sep 2016 15:42:28 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/middleware/network/ip/</guid>
      <description>&lt;p&gt;IP（Internet Protocol , 互联网协议）主要用于互联网通信。IP协议用于将多个包交换网络连接起来，他在原地址和目的地址之间传输数据报，还提供对数据大小的重新组装功能，以适应不同网络的要求。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>计算机网络系列---- tcp/ip</title>
      <link>https://kingjcy.github.io/post/middleware/network/tcp/</link>
      <pubDate>Mon, 13 Jun 2016 20:43:01 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/middleware/network/tcp/</guid>
      <description>&lt;p&gt;传输控制协议（TCP，Transmission Control Protocol）是一种面向连接的、可靠的、基于字节流的传输层通信协议。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>计算机网络系列---- Http/https</title>
      <link>https://kingjcy.github.io/post/middleware/network/http/</link>
      <pubDate>Mon, 13 Jun 2016 20:42:55 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/middleware/network/http/</guid>
      <description>当今web程序的开发技术真是百家争鸣，ASP.NET, PHP, JSP，Perl, AJAX 等等。 无论Web技术在未来如何发展，理解Web程序之间通信的基本协议相当重要， 因为它让我们理解了Web应用程序的内部工作.
http是网络的最基本协议，使用Fiddler工具非常方便地捕获HTTP Request和HTTP Response。
基本概念 各种协议 尽管我们会单独讲解其他协议，比如tcp/ip，但是讲解http肯定是离不开这些协议的。
tcp/ip数据传输方式
利用tcp/ip协议族通讯时，通过分层顺序通讯。
发送端从应用层往下走，接收端从应用层往上走 发送端每经过一层都会被打上该层所属的首部信息，接收端每经过一层将把首部去掉  http在应用层决定了向用户提供应用服务时通讯的活动 应用层包括：FTP，DNS，HTTP等
各种协议的关系
1、DNS协议是应用层协议作用是提供域名到ip地址之间的解析服务
2、TCP协议位于传输层 作用是提供可靠的字节流服务
字节流服务：将大块数据分割成以报文段为单位的数据包 可靠：采用三次握手策略  3、ip位于网络层作用是把各种数据包传送给对方
确保传送正确的两个条件
IP地址：指明了节点被分配到的地址。可变。 MAC地址：网卡所属的固定地址。不可变。  4、http协议和tcp协议的区别与联系
区别
所属协议层不同：tcp属于传输层，http属于应用层 职责不同：tcp解决数据传输问题，http解决数据包装问题  联系
http协议是构建在tcp协议之上的 打个比方：ip是高速公路，tcp是跑在高速公路上的卡车，http是卡车里面的包裹  5、URL与URI
URL：统一资源定位符，资源的地址。是URI的子集 URI：统一资源标识符，用字符串标识某一互联网资源  URI的格式
web web理念：文档之间相关关联，连成可相互参阅的万维网（www）
web互连（通讯）的基础：tcp/ip协议族，http属于它内部的子集
web（www）的三项构建技术：
html：页面使用什么语言展示 URL：页面在什么位置 http：文档之间传递的协议是什么  Web服务器，浏览器，代理服务器 当我们打开浏览器，在地址栏中输入URL，然后我们就看到了网页。 原理是怎样的呢？
实际上我们输入URL后，我们的浏览器给Web服务器发送了一个Request, Web服务器接到Request后进行处理，生成相应的Response，然后发送给浏览器， 浏览器解析Response中的HTML,这样我们就看到了网页，过程如下图所示
client&amp;lt;----------&amp;gt;server  我们的Request 有可能是经过了代理服务器，最后才到达Web服务器的。 client&amp;lt;----------&amp;gt;proxy&amp;lt;-----------&amp;gt;server  代理服务器就是网络信息的中转站，有什么功能呢？
 提高访问速度， 大多数的代理服务器都有缓存功能。 突破限制， 也就是翻墙了 隐藏身份。  http 什么是HTTP协议 超文本传输协议(HTTP)是一种通信协议，是指计算机通信网络中两台计算机之间进行通信所必须共同遵守的规定或规则，它允许将超文本标记语言(HTML)文档从Web服务器传送到客户端的浏览器</description>
    </item>
    
    <item>
      <title>计算机网络系列---- Process Communication</title>
      <link>https://kingjcy.github.io/post/linux/c&#43;&#43;/process-communication/</link>
      <pubDate>Tue, 28 Apr 2015 20:16:11 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/linux/c&#43;&#43;/process-communication/</guid>
      <description>&lt;p&gt;system v的进程间通信的三大方式：消息队列，共享内存，信号量。&lt;/p&gt;

&lt;p&gt;posix标志的进程间通信：消息队列，共享内存，信号量，互斥锁，条件变量，基于文件的读写锁&lt;/p&gt;

&lt;p&gt;system v的ipc是老版本，实现相对复杂，POSIX是新版本，实现容易。posix是现在大部分linux的标准接口，目前也比较兼容system v的api，而system v是sun公司主要推行的版本。所以现在大部分以posix为准。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>计算机网络系列---- 网络通信</title>
      <link>https://kingjcy.github.io/post/middleware/io/netcomminicate/</link>
      <pubDate>Tue, 28 Apr 2015 20:16:11 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/middleware/io/netcomminicate/</guid>
      <description>多进程 -&amp;gt; 多线程 -&amp;gt; 线程池-&amp;gt; select/poll -&amp;gt; epoll(I/O多路复用)
ipv4套接字结构 struct sockaddr_in{ uint8_t sin_len; &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;结构体长度 sa_family_t sin_family; &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;地址家族 AF_INET&amp;mdash;IPV4 AF_INET6&amp;ndash;IPV6 in_port_t sin_port; &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;端口 struct in_addr sin_addr; &amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;ip地址，这个结构体只有这一个成员，无符号的32位 char sin_zero[8]; &amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;暂不使用 };
&amp;mdash;》 通用套接字结构 struct sockaddR{ uint8_t sin_len; &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;结构体长度 sa_family_t sin_family; &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;地址家族 AF_INET&amp;mdash;IPV4 char * sa_date[14] &amp;mdash;&amp;mdash;&amp;mdash;14个字节和ipv4里的后三个字节一样 };
字节序： 最高有效位存储于最低内存地址处&amp;mdash;&amp;ndash;》大 网络字节序是大端字节序。
字节序转换函数： uint32_t htonl(uint32_t hostlong) uint16_t htons(uint16_t hostlong) uint32_t ntohl(uint32_t hostlong) uint16_t ntohs(uint16_t hostlong) &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-n==net h=host l==long s==short
地址转换函数： in_addr_t inet_addr（const char *cp） &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-16位十进制地址转化为32位二进制地址 int inet_aton(const char *cp,struct in_addr inp) &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-16位十进制地址转化为32位二进制地址 char inet_ntoa(struct in_addr in) &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-32位二进制地址转化为16位十进制地址</description>
    </item>
    
  </channel>
</rss>