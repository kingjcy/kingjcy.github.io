<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Shop on kingjcy blog</title>
    <link>https://kingjcy.github.io/tags/shop/</link>
    <description>Recent content in Shop on kingjcy blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>Copyright (c) 2020. All rights reserved.</copyright>
    <lastBuildDate>Tue, 04 Jun 2019 14:38:45 +0800</lastBuildDate>
    
	<atom:link href="https://kingjcy.github.io/tags/shop/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>架构系列---- 中台建设</title>
      <link>https://kingjcy.github.io/post/architecture/electronic-commerce-/</link>
      <pubDate>Tue, 04 Jun 2019 14:38:45 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/architecture/electronic-commerce-/</guid>
      <description>组织架构的演变 其实我们在另一篇文章架构的演变中已经主要架构的设计思路，其实也是和组织架构相互对应，相互衍生的。
中台 前台---中台---后台  而到了大中台时代，中台的核心价值是在于，在对企业业务有了柔性支撑和贯通的前提下，再形成协同与智慧的运营体系。
一般企业架构分成了三个层次：前台、中台、后台。中台又分成三大块，业务中台、数据中台和技术中台。
技术中台支撑企业业务发展，通过打通企业内异构系统，支持业务中台； 业务中台围绕公司业务运营进行服务，将获取的多维度数据传递给数据中台，由数据中台分析反馈给业务中台，以优化业务运营。同时数据中台通过BI智能分析，帮助企业管理者更好的做决策分析。三者是相辅相成，相互协作的。 业务中台其实就是把原有的前端的会员中心、营销中心、商品中心，后端的供应链中心、采配中心等重点模块放在业务中台模块，以后前端不管对接多少个第三方，线上线下增加多少家门店，都能进行统一会员、统一商品编码、统一供应链整合，整个系统一体化。真正做到用技术支持业务，通过业务收集大量数据进行决策，统一高效的进行管理。 数据中台：一般指以数据采集、数据集成、数据治理，指标体系和数据仓库统一建设等数据管理活动为典型特征的中台。  大中台 其实中台严格意义上来说，不是一种架构，也不是一种系统，而是一种战略。
当前最需要建设的中台有两种：
狭义的业务中台：一般指在线业务为典型特征的中台。在OLDI（Online Data-Intensive）时代，越来越多的企业的核心业务都是在线业务，因此把在线业务中台简称为业务中台。 数据中台：一般指以数据采集、数据集成、数据治理，指标体系和数据仓库统一建设等数据管理活动为典型特征的中台。  对业务中台来说，比较符合的场景主要有：
业务系统研发团队至少大几十人（含外包的），需求多变化快，系统又涉及多个领域（比如做ERP、电商的），业务逻辑比较复杂。 这时业务中台可以把系统和业务领域划分清楚，提高研发效率。做相似行业的外包项目为主，业务规模也做的比较大的（一年有两位数的项目）。 这时业务中台可以提升软件复用，降低定制化成本，提高研发效率。如果每个项目都完全不一样，那中台也救不了你。  支持业务中台的技术体系，包括微服务、DevOps、云原生和分布式事务等。
将需求设计成微服务架构，然后每个服务使用各种技术栈来开发业务，比如golang的技术栈的高并发的特性来开发web服务等，然后将一些统一的模块进行统一的接入和输出，使用devops的开发模式，在业务中还是需要解决分布式事务等问题。
比如在网易，是网易轻舟微服务平台，提供微服务应用全生命周期的完整支持，包括下一代微服务Service Mesh支持、经典微服务框架NSF、包括CI/CD的DevOps、分布式事务框架GXTS、APM、API网关、GoAPI全自动化测试以及容器应用管理服务等。
对数据中台来说，比较符合的场景：
数据产品比较多，每天要看数据如果没数据就不知道怎么工作的运营人员比较多的业务。 比如电商就是典型。尤其是数据产品和运营人员还在多个团队。 用数据的姿势比较复杂，问题比较多，比如经常出现指标不一致、数据出错、想要的数据不知道哪里有等问题。  支持数据中台的技术体系，包括指标管理、数据服务、元数据管理、数仓开发与管理、数据安全管理、数据资产管理、大数据计算引擎、数据集成/同步/交换引擎等，
其实数据中台就是将数据进行处理，不同数据资源，统一的输出标准，中间用到大部分就是数据引擎，比如kafka队列，sprak，flink等流式引擎，hadoop，hbase和hive等大数据引擎。
比如在网易，是以网易猛犸为核心的网易全链路数据中台解决方案。</description>
    </item>
    
    <item>
      <title>架构系列---- 企业架构</title>
      <link>https://kingjcy.github.io/post/architecture/enterprise-architecture/</link>
      <pubDate>Tue, 04 Jun 2019 14:38:45 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/architecture/enterprise-architecture/</guid>
      <description>重下往上：基础平台，应用
基础平台 IAAS基础设施建设
其实就是服务器，已经很成熟，大部分厂商，包括阿里云都是直接一台什么配置的服务器多少钱，其实就是一台vm，当天有钱也可以卖物理机，还可以买物理机回来自己搭建数据中心。
PAAS平台建设
PAAS平台其实是基于vm基础上一套申请机器，扩缩容的流程，也可以基于vm搭建基础应用。AWS就是典型的
随着docker虚拟化技术的发展，出现了一种新型的paas平台，就是基于docker的，这个其实比较倾向于应用，利用镜像能够快速的部署应用，扩缩容，十分轻量级，不像vm部署可能需要很长的时间，所以这个就比较倾向于应用了，而不是docker的分配。
其实上面讲的都是应用型的PAAS，也就是APaaS，APAAS是一种面向IT企业和机构的云计算应用开发与部署平台。APaaS主要为应用提供运行环境和数据存储，能够将本地部署的传统应用直接部署到APaaS上。容器厂商和IaaS厂商的PaaS大致为APaaS。
还有一种平台访问型的PASS，也就是IPAAS，大数据厂商的PaaS实际上是属于IPaaS。
IPaaS是用于集成和协同的PaaS平台，不仅可以支持与现有云服务间的连接性，而且可以以安全的方式提供企业应用的访问能力。IPaaS主要用于集成和构建复合应用。
基础平台并不是所有的企业都会建设的，只有大型的企业会建设这些东西，比如阿里云，他们有自己的数据中心，并且机器并不是全年都在使用的，而小企业只要在大企业搭建的云平台的基础上进行业务中台的建设就可以 一般paas平台都是以卖自己的产品并且在自己的加上运行的为主的企业会在发展的过程中会需要发展
1、对外提供saas服务，但是机器会在一段时间内有使用峰值，正常情况下不需要那么多的机器，这些企业一般都是在云上租用的服务器，所以能够快速扩缩容能够应对需求，不用的时候不租用服务器可以降低成本 2、使用云平台提供的paas服务，但是随着规模的扩大，本来昂贵的paas方案，越来越高，需要自己构建一套方案
所以现在以docker为核心的paas平台是核心与主流，核心流程
应用 其实就是运行在基础平台上的业务系统，可以是单体系统，可以是分布式系统。比如说使用最多的购物系统和打车系统。
购物系统
打车系统
其实系统架构都是演进的，并不是所有的企业都要走到最后的架构，必须以业务驱动为核心，比如你的企业并不需要大并发，单体系统就可以，有的微服务的SOA架构既可以，但是像淘宝等就需要服务化，微服务。
架构的演进
在不同的架构思想和体系中需要考虑的问题也不一样
1、单体架构
也就是我们常用的前后台体系
应用的开发无非就是解决如下问题：
 安全性
 1、web开发
2、安全访问
 高并发高性能
 1、并发控制
2、并发安全
3、异步处理：定一个channel，以goroutine来运行，用于接受异步返回的结果
4、并发
5、goroutine并发
 高可用
可扩展
容错性
 2、第一代微服务架构&amp;ndash;SOA
考虑单体架构的所有问题
 分布式问题
 1、分布式事务的实现
2、分布式安全
3、第一代微服务架构&amp;ndash;大中台
 统一抽象规划在中台，中台建设
 作为一种组织架构模式，“中台”突出的是规划控制和协调的能力，主要是将企业总线的瓶颈转化为中台服务的相互调用，而“前台”强调的是创新和灵活多变。这是一种快速设计和迭代的方法。
小前台 灵活多变，适应很多需求
大中台 其实就是将一些能够统一的业务进行统一规划，所以系统的接入和流出都是标准化的操作。
可见随着中台的发展，中台已经开始分为业务中台，数据中台，技术中台等，其实就是中台越来越庞大，需要每个领域进行专注，每一种中台都往平台化的方向发展，便于使用。具体中台可以看中台建设
轻后台 主要的实现业务的不能抽象统一的逻辑系统还是在后台，比如ERP系统等。 在建设好的中台上进行业务处理，和服务端开发，或者平台建设。
4、下一代微服务架构&amp;ndash;大中台
去中心化</description>
    </item>
    
    <item>
      <title>架构系列---- 购物系统</title>
      <link>https://kingjcy.github.io/post/architecture/shopping/</link>
      <pubDate>Tue, 04 Jun 2019 14:38:45 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/architecture/shopping/</guid>
      <description>不管是正常的购物还是抢购还是秒杀都是这么一个基本流程
搜索系统&amp;mdash;订单系统&amp;mdash;物流系统
订单系统：购物车系统&amp;mdash;确认订单&amp;mdash;支付系统，核心就是出发数据库修改库存
秒杀系统 秒杀系统会做，基本的购物，抢购，抢红包都会做。
秒杀的特性：限时限量，导致的场景就是瞬时并发量大
 热场
 在活动开始之前，最好设计一个“热场”。
“热场”的形式多种多样，例如：分享活动领优惠券，领秒杀名额等等。“热场”的形式不重要，重要的是通过它获取一些准备信息。
例如：有可能参与的用户数，他们的地域分布，他们感兴趣的商品。为后面的技术架构提供数据支持。
秒杀系统设计的核心思想：限流，削峰，高并发，异步处理，内存缓存
整体架构
千万级秒杀系统架构
整体流程
（限流） 1、web层使用js技术，比如购买按钮置灰，可以减少大量的重复请求 （限流截流） 2、负载均衡nginx（也就是网关），进行截流，比如相同请求，只转发一个，分发到不同的服务实例 （缓存） 3、cdn缓存技术，将很多的静态资源存储在cdn中，能够快速返回 1、限制用户维度访问频率 针对同一个用户（ Userid 维度），做页面级别缓存，单元时间内的请求，统一走缓存，返回同一个页面。 2、限制商品维度访问频率 大量请求同时间段查询同一个商品时，可以做页面级别缓存，不管下回是谁来访问，只要是这个页面就直接返回。 （削峰） 4、然后将请求放到MQ中，排队处理， （高并发，异步处理） 5、到后台实例实现并发的多进程，多线程的处理，也就上面购物系统处理的一个流程  1、并发控制
2、并发安全
3、异步处理：定一个channel，以goroutine来运行，用于接受异步返回的结果
4、分布式事务
5、分布式安全
（高并发） 6、最后到数据库包括缓存数据库的读写分离，分区分库分表。 （缓存） 7、缓存是很快的用在每一层能够使用的地方  分层的目的是为了将压力留在上层，一般瓶颈都是在数据库，所以需要把有效得请求到数据库中进行处理</description>
    </item>
    
  </channel>
</rss>