<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Prometheus on kingjcy blog</title>
    <link>https://kingjcy.github.io/tags/prometheus/</link>
    <description>Recent content in Prometheus on kingjcy blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>Copyright (c) 2020. All rights reserved.</copyright>
    <lastBuildDate>Fri, 10 Jan 2020 17:53:01 +0800</lastBuildDate>
    
	<atom:link href="https://kingjcy.github.io/tags/prometheus/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>prometheus探针系列---- Grok_exporter</title>
      <link>https://kingjcy.github.io/post/monitor/prometheus/exporter/log/grok_exporter/</link>
      <pubDate>Fri, 10 Jan 2020 17:53:01 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/monitor/prometheus/exporter/log/grok_exporter/</guid>
      <description>&lt;p&gt;grok_exporter是基于logstash的grok的插件开发的日志分析工具，可以分析非结构化日志根据正则表达式进行匹配，然后生成适合prometheus的规则规范的metrics。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>prometheus探针系列---- mtail</title>
      <link>https://kingjcy.github.io/post/monitor/prometheus/exporter/log/mtail/</link>
      <pubDate>Fri, 10 Jan 2020 17:53:01 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/monitor/prometheus/exporter/log/mtail/</guid>
      <description>&lt;p&gt;mtail是一个可以从应用程序日志中提取指标，并将其导出到时间序列数据库或时间序列计算器中，以便配置警报和仪表盘的工具。&lt;/p&gt;

&lt;p&gt;提取由定义了模式和动作的mtail程序来控制。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Zabbix数据入到tsdb</title>
      <link>https://kingjcy.github.io/post/monitor/zabbix/zabbix2tsdb/</link>
      <pubDate>Wed, 20 Nov 2019 10:28:16 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/monitor/zabbix/zabbix2tsdb/</guid>
      <description>&lt;p&gt;由于时序数据库的在监控中的作用，可以将zabbix集成到时序数据库中，完成传统和时序的兼容迁移，现在最主要的就是怎么将数据写入兼容到tsdb中。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>prometheus集群系列----VictoriaMetrics</title>
      <link>https://kingjcy.github.io/post/monitor/prometheus/cluster/victoriametrics/</link>
      <pubDate>Thu, 13 Jun 2019 16:19:46 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/monitor/prometheus/cluster/victoriametrics/</guid>
      <description>&lt;p&gt;VictoriaMetrics是一个高性能的，长期存储的prometheus的远程解决方案，实现集群使用的federation的方式，只不过性能很优秀，包括write和query，聚合数据也解决了查询问题。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Process_exporter</title>
      <link>https://kingjcy.github.io/post/monitor/prometheus/exporter/process_exporter/</link>
      <pubDate>Tue, 09 Apr 2019 16:44:29 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/monitor/prometheus/exporter/process_exporter/</guid>
      <description>1.1 安装
wget https://github.com/ncabatoff/process-exporter/releases/download/v0.4.0/process-exporter-0.4.0.linux-amd64.tar.gz tar -xvf process-exporter-0.4.0.linux-amd64.tar.gz -C /usr/local/  配置
选择要监视的进程并将它的分组，提供命令行参数或者使用YAML配置文件两种方法。
整体模版
process_names: - matcher1 - matcher2 ... - matcherN  默认定义全部进程监控
vim conf.yaml process_names: - name: &amp;quot;{{.Comm}}&amp;quot; cmdline: - &#39;.+&#39;  group name 进程名，可以使用变量模版匹配
1.2 模版变量
可用的模板变量：
{{.Comm}} 包含原始可执行文件的basename，换句话说 在/proc/&amp;lt;pid&amp;gt;/stat {{.ExeBase}} 包含可执行文件的basename，这个是name的默认值 {{.ExeFull}} 包含可执行文件的完全限定路径 {{.Username}} contains the username of the effective user {{.Matches}} 映射包含应用命令行所产生的所有匹配项  创建配置文件定义进程名监控
Process-exporter 可以进程名字匹配进程，获取进程信息。匹配规则由name对应的模板变量决定，以下表示监控进程名字为nginx 与 zombie 的进程状态
vim process-name.yaml process_names: - name: &amp;quot;{{.Matches}}&amp;quot; cmdline: - &#39;nginx&#39; - name: &amp;quot;{{.</description>
    </item>
    
    <item>
      <title>prometheus系列---- Prometheus Operater</title>
      <link>https://kingjcy.github.io/post/monitor/prometheus/prometheus-operater/</link>
      <pubDate>Tue, 12 Mar 2019 16:57:05 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/monitor/prometheus/prometheus-operater/</guid>
      <description>Prometheus-Operator是一套为了方便整合prometheus和kubernetes的开源方案，使用Prometheus-Operator可以非常简单的在kubernetes集群中部署Prometheus服务，用户能够使用简单的声明性配置来配置和管理Prometheus实例，这些配置将响应、创建、配置和管理Prometheus监控实例。
官方地址：https://github.com/coreos/pro... 目前状态：beta状态，还不够完整，但向后兼容。将成为趋势 前置条件：要求k8s的版本&amp;gt;=1.8.0（应该是因为metric api和CRD支持的限制） Operator的核心思想是将Prometheus的部署与它监控的对象的配置分离，做到部署与监控对象的配置分离之后，就可以轻松实现动态配置。使用Operator部署了Prometheus之后就可以不用再管Prometheus Server了，以后如果要添加监控对象或者添加告警规则，只需要编写对应的ServiceMonitor和Prometheus资源就可以，不用再重启Prometheus服务，Operator会动态的观察配置的改动，并将其生成为对应的prometheus配置文件其中Operator可以部署、管理Prometheus Service  四种CRD作用如下：
1.Prometheus: 由 Operator 依据一个自定义资源kind: Prometheus类型中，所描述的内容而部署的 Prometheus Server 集群，可以将这个自定义资源看作是一种特别用来管理Prometheus Server的StatefulSets资源。
2.ServiceMonitor: 一个Kubernetes自定义资源(和kind: Prometheus一样是CRD)，该资源描述了Prometheus Server的Target列表，Operator 会监听这个资源的变化来动态的更新Prometheus Server的Scrape targets并让prometheus server去reload配置(prometheus有对应reload的http接口/-/reload)。而该资源主要通过Selector来依据 Labels 选取对应的Service的endpoints，并让 Prometheus Server 通过 Service 进行拉取（拉）指标资料(也就是metrics信息)，metrics信息要在http的url输出符合metrics格式的信息，ServiceMonitor也可以定义目标的metrics的url。
3.Alertmanager：Prometheus Operator 不只是提供 Prometheus Server 管理与部署，也包含了 AlertManager，并且一样通过一个 kind: Alertmanager 自定义资源来描述信息，再由 Operator 依据描述内容部署 Alertmanager 集群。
4.PrometheusRule:对于Prometheus而言，在原生的管理方式上，我们需要手动创建Prometheus的告警文件，并且通过在Prometheus配置中声明式的加载。而在Prometheus Operator模式中，告警规则也编程一个通过Kubernetes API 声明式创建的一个资源.告警规则创建成功后，通过在Prometheus中使用想servicemonitor那样用ruleSelector通过label匹配选择需要关联的PrometheusRule即可。
安装方式：
创建命名空间：monitoring 执行yaml文件  常见问题：
因为要operator中要支持聚合api，在某些版本的集群上可能需要一些配置，如下：
安装cfssl证书生成工具：http://www.cnblogs.com/xuling... 生成证书
cfssl gencert -ca=/etc/kubernetes/pki/ca.pem -ca-key=/etc/kubernetes/pki/ca-key.pem -config=/etc/kubernetes/pki/ca-config.json -profile=jpaas metrics-server-csr.json | cfssljson -bare metrics-server { &amp;quot;CN&amp;quot;: &amp;quot;aggregator&amp;quot;, &amp;quot;host&amp;quot;: [], &amp;quot;key&amp;quot;: { &amp;quot;algo&amp;quot;: &amp;quot;rsa&amp;quot;, &amp;quot;size&amp;quot;: 2048 }, &amp;quot;names&amp;quot;: [ { &amp;quot;C&amp;quot;: &amp;quot;CN&amp;quot;, &amp;quot;ST&amp;quot;: &amp;quot;BeiJing&amp;quot;, &amp;quot;L&amp;quot;: &amp;quot;BeiJing&amp;quot;, &amp;quot;O&amp;quot;: &amp;quot;k8s&amp;quot;, &amp;quot;OU&amp;quot;: &amp;quot;cloudnative&amp;quot; } ] }  配置master组件参数，以支持metric-server</description>
    </item>
    
    <item>
      <title>Redis_exporter</title>
      <link>https://kingjcy.github.io/post/monitor/prometheus/exporter/redis_exporter/</link>
      <pubDate>Thu, 21 Feb 2019 15:10:33 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/monitor/prometheus/exporter/redis_exporter/</guid>
      <description>&lt;p&gt;这边主要是对redis探针的源码原理进行记录，便于后面使用查看&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Script_exporter</title>
      <link>https://kingjcy.github.io/post/monitor/prometheus/exporter/script_exporter/</link>
      <pubDate>Tue, 09 Oct 2018 14:29:49 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/monitor/prometheus/exporter/script_exporter/</guid>
      <description>&lt;p&gt;Prometheus exporter for run script to response metrics.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Postgres_exporter</title>
      <link>https://kingjcy.github.io/post/monitor/prometheus/exporter/postgres_exporter/</link>
      <pubDate>Thu, 09 Aug 2018 14:29:34 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/monitor/prometheus/exporter/postgres_exporter/</guid>
      <description>&lt;p&gt;Prometheus exporter for PostgreSQL server metrics.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Thanos</title>
      <link>https://kingjcy.github.io/post/monitor/prometheus/cluster/thanos/</link>
      <pubDate>Fri, 13 Jul 2018 17:14:15 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/monitor/prometheus/cluster/thanos/</guid>
      <description>&lt;p&gt;Thanos，一组通过跨集群联合、跨集群无限存储和全局查询为Prometheus 增加高可用性的组件。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Mysqld Exporter</title>
      <link>https://kingjcy.github.io/post/monitor/prometheus/exporter/mysqld-exporter/</link>
      <pubDate>Mon, 09 Jul 2018 14:29:04 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/monitor/prometheus/exporter/mysqld-exporter/</guid>
      <description>&lt;p&gt;mysql监控指标采集探针:Prometheus exporter for MySQL server metrics.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>监控架构系列---- Infrastructure</title>
      <link>https://kingjcy.github.io/post/monitor/prometheus/monitor-scheme/infrastructure/</link>
      <pubDate>Wed, 13 Jun 2018 11:16:45 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/monitor/prometheus/monitor-scheme/infrastructure/</guid>
      <description>&lt;p&gt;一个完整的监控体系包括：采集数据、分析存储数据、展示数据、告警以及自动化处理、监控工具自身的安全机制.&lt;/p&gt;

&lt;p&gt;使用prometheus进行基础设施监控。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>prometheus系列---- Prometheus Principle</title>
      <link>https://kingjcy.github.io/post/monitor/prometheus/prometheus-principle/</link>
      <pubDate>Sun, 13 May 2018 17:56:03 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/monitor/prometheus/prometheus-principle/</guid>
      <description>&lt;p&gt;本篇文章主要是对prometheus的一些原理进行解析。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>监控架构系列---- K8s监控方案</title>
      <link>https://kingjcy.github.io/post/monitor/prometheus/monitor-scheme/k8s/</link>
      <pubDate>Sat, 12 May 2018 17:02:34 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/monitor/prometheus/monitor-scheme/k8s/</guid>
      <description>&lt;p&gt;一个完整的监控体系包括：采集数据、分析存储数据、展示数据、告警以及自动化处理、监控工具自身的安全机制.&lt;/p&gt;

&lt;p&gt;使用prometheus进行kubernetes的容器监控。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>prometheus集成库---- Client_golang</title>
      <link>https://kingjcy.github.io/post/monitor/prometheus/library/client_golang/</link>
      <pubDate>Mon, 09 Apr 2018 09:40:04 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/monitor/prometheus/library/client_golang/</guid>
      <description>&lt;p&gt;client_golang 是Prometheus client的使用，基于golang语言。提供了prometheus的数据规范。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Node Exporter</title>
      <link>https://kingjcy.github.io/post/monitor/prometheus/exporter/node-exporter/</link>
      <pubDate>Mon, 19 Mar 2018 16:51:51 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/monitor/prometheus/exporter/node-exporter/</guid>
      <description>&lt;p&gt;node_exporter 主要用于 *NIX 系统监控, 用 Golang 编写:Prometheus exporter for hardware and OS metrics exposed by *NIX kernels, written in Go with pluggable metric collectors.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>prometheus系列---- Prometheus入门</title>
      <link>https://kingjcy.github.io/post/monitor/prometheus/prometheus/</link>
      <pubDate>Thu, 29 Jun 2017 16:31:54 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/monitor/prometheus/prometheus/</guid>
      <description>&lt;p&gt;Prometheus，它最早是借鉴了 Google 的 Borgmon 系统，完全是开源的，也是CNCF 下继 K8S 之后第二个项目。它们的开发人员都是原 Google 的 SRE，通过 HTTP 的方式来做数据收集，对其最深远的应该是其被设计成一个 self sustained 的系统，也就是说它是完全独立的系统，不需要外部依赖。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>