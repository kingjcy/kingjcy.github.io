<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Compress on kingjcy blog</title>
    <link>https://kingjcy.github.io/tags/compress/</link>
    <description>Recent content in Compress on kingjcy blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>Copyright (c) 2020. All rights reserved.</copyright>
    <lastBuildDate>Sun, 29 Jan 2017 10:39:28 +0800</lastBuildDate>
    
	<atom:link href="https://kingjcy.github.io/tags/compress/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>golang使用系列---- Compress</title>
      <link>https://kingjcy.github.io/post/golang/go-compress/</link>
      <pubDate>Sun, 29 Jan 2017 10:39:28 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/golang/go-compress/</guid>
      <description>archive一般用于打包，compress一般用于压缩。
bzip2 一、bzip2的简介
bzip2包实现bzip2的解压缩，bzip2是对单个文件进行压缩，可以先进行tar归档，然后进行压缩。
二、bzip2的使用
go标准库中提供了一个对bzip2压缩包进行读取的操作，但是并没有提供进行bzip2压缩操作。
package main import ( &amp;quot;compress/bzip2&amp;quot; &amp;quot;os&amp;quot; &amp;quot;log&amp;quot; &amp;quot;fmt&amp;quot; ) func main() { fz, err := os.Open(&amp;quot;1.go.bz2&amp;quot;) if err != nil { log.Fatal(err) } w := bzip2.NewReader(fz) buf := make([]byte, 1024 * 100) for { n, err := w.Read(buf) if n == 0 || err != nil { break } fmt.Println(string(buf[:n])) } }  deflate DEFLATE是同时使用了LZ77算法与哈夫曼编码（Huffman Coding）的一个无损数据压缩算法。它最初是由菲尔·卡茨（Phil Katz）为他的PKZIP软件第二版所定义的，后来被RFC 1951标准化。很多压缩方式都是在这个基础上封装开发的。
const ( NoCompression = 0 // 不压缩 BestSpeed = 1 // 最快速度压缩 BestCompression = 9 // 最佳压缩比压缩 DefaultCompression = -1 // 默认压缩 )  1）func NewReader(r io.</description>
    </item>
    
  </channel>
</rss>