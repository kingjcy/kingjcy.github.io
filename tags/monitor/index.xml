<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Monitor on kingjcy blog</title>
    <link>https://kingjcy.github.io/tags/monitor/</link>
    <description>Recent content in Monitor on kingjcy blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>Copyright (c) 2020. All rights reserved.</copyright>
    <lastBuildDate>Mon, 15 Oct 2018 20:24:09 +0800</lastBuildDate>
    
	<atom:link href="https://kingjcy.github.io/tags/monitor/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Ntp</title>
      <link>https://kingjcy.github.io/post/monitor/server/ntp/</link>
      <pubDate>Mon, 15 Oct 2018 20:24:09 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/monitor/server/ntp/</guid>
      <description>&lt;p&gt;ntp客户端的监控&lt;/p&gt;

&lt;p&gt;主要是监控客户端的存活状态，和时间偏移值offset，是否同步时间成功。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>监控架构系列---- Infrastructure</title>
      <link>https://kingjcy.github.io/post/monitor/prometheus/monitor-scheme/infrastructure/</link>
      <pubDate>Wed, 13 Jun 2018 11:16:45 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/monitor/prometheus/monitor-scheme/infrastructure/</guid>
      <description>&lt;p&gt;一个完整的监控体系包括：采集数据、分析存储数据、展示数据、告警以及自动化处理、监控工具自身的安全机制.&lt;/p&gt;

&lt;p&gt;使用prometheus进行基础设施监控。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>监控架构系列---- K8s监控方案</title>
      <link>https://kingjcy.github.io/post/monitor/prometheus/monitor-scheme/k8s/</link>
      <pubDate>Sat, 12 May 2018 17:02:34 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/monitor/prometheus/monitor-scheme/k8s/</guid>
      <description>&lt;p&gt;一个完整的监控体系包括：采集数据、分析存储数据、展示数据、告警以及自动化处理、监控工具自身的安全机制.&lt;/p&gt;

&lt;p&gt;使用prometheus进行kubernetes的容器监控。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>监控架构系列---- 后台架构</title>
      <link>https://kingjcy.github.io/post/monitor/prometheus/monitor-scheme/promes-admin/</link>
      <pubDate>Sat, 12 May 2018 17:02:34 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/monitor/prometheus/monitor-scheme/promes-admin/</guid>
      <description>下发流程 安装流程 告警流程 性能 mysql告警事件表是千万级
mysql服务器表二十万
mysql安装事件百万级</description>
    </item>
    
    <item>
      <title>监控系列---- zabbix源码阅读</title>
      <link>https://kingjcy.github.io/post/monitor/zabbix/zabbixcode/</link>
      <pubDate>Sat, 25 Nov 2017 09:52:47 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/monitor/zabbix/zabbixcode/</guid>
      <description>原理
流程 一个监控系统运行的大概的流程是这样的：
agentd需要安装到被监控的主机上，它负责定期收集各项数据，并发送到zabbix server端，zabbix server将数据存储到数据库中，zabbix web根据数据在前端进行展现和绘图。这里agentd收集数据分为主动和被动两种模式：
主动：agent请求server获取主动的监控项列表，并主动将监控项内需要检测的数据提交给server/proxy
被动：server向agent请求获取监控项的数据，agent返回数据。
主动监测 通信过程如下：
zabbix首先向ServerActive配置的IP请求获取active items，获取并提交active tiems数据值server或者proxy。很多人会提出疑问：zabbix多久获取一次active items？它会根据配置文件中的RefreshActiveChecks的频率进行，如果获取失败，那么将会在60秒之后重试。分两个部分：
1.获取ACTIVE ITEMS列表
Agent打开TCP连接（主动检测变成Agent打开） Agent请求items检测列表 Server返回items列表 Agent 处理响应 关闭TCP连接 Agent开始收集数据  主动检测提交数据过程如下：
Agent建立TCP连接 Agent提交items列表收集的数据 Server处理数据，并返回响应状态 关闭TCP连接  被动监测 通信过程如下：
Server打开一个TCP连接 Server发送请求agent.ping\n Agent接收到请求并且响应&amp;lt;HEADER&amp;gt;&amp;lt;DATALEN&amp;gt;1 Server处理接收到的数据1 关闭TCP连接  这里，有人可以看出来，被动模式每次都需要打开一个tcp连接，这样当监控项越来越多时，就会出现server端性能问题了。
not supported items通信过程
● Server打开一个TCP连接 ● Server发送请求vfs.fs.size[ no]\n ● Agent接收请求并且返回响应数据 &amp;lt;HEADER&amp;gt;&amp;lt;DATALEN&amp;gt;ZBX_NOTSUPPORTED\0Cannot obtain filesystem information: [2] No such file or directory ● Server接收并处理数据, 将item的状态改为“ not supported ” ● 关闭TCP连接  还有人会问，那实际监控中是用主动的还是被动的呢？这里主要涉及两个地方：</description>
    </item>
    
    <item>
      <title>prometheus系列---- Prometheus入门</title>
      <link>https://kingjcy.github.io/post/monitor/prometheus/prometheus/</link>
      <pubDate>Thu, 29 Jun 2017 16:31:54 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/monitor/prometheus/prometheus/</guid>
      <description>&lt;p&gt;Prometheus，它最早是借鉴了 Google 的 Borgmon 系统，完全是开源的，也是CNCF 下继 K8S 之后第二个项目。它们的开发人员都是原 Google 的 SRE，通过 HTTP 的方式来做数据收集，对其最深远的应该是其被设计成一个 self sustained 的系统，也就是说它是完全独立的系统，不需要外部依赖。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>监控系列---- Zabbix基本使用</title>
      <link>https://kingjcy.github.io/post/monitor/zabbix/zabbix/</link>
      <pubDate>Sat, 04 Mar 2017 17:54:04 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/monitor/zabbix/zabbix/</guid>
      <description>&lt;p&gt;zabbix是目前各大互联网公司使用最广泛的开源监控之一,其历史最早可追溯到1998年,在业内拥有各种成熟的解决方案.&lt;/p&gt;

&lt;p&gt;zabbix属于CS架构,Server端基于C语言编写,相比其他语言具有一定的性能优势(在数据量不大的情况下!).Web管理端则使用了PHP. 而其client端有各种流行语言的库实现,方便使用其API&lt;/p&gt;

&lt;p&gt;在数据的存储方面,zabbix使用了关系性数据库,包括SQLite,MySQL,PostgreSQL,Oracle,DB2&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>