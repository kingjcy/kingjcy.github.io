<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cloudnative on kingjcy blog</title>
    <link>https://kingjcy.github.io/tags/cloudnative/</link>
    <description>Recent content in Cloudnative on kingjcy blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>Copyright (c) 2020. All rights reserved.</copyright>
    <lastBuildDate>Tue, 03 Aug 2021 20:12:53 +0800</lastBuildDate>
    
	<atom:link href="https://kingjcy.github.io/tags/cloudnative/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>云计算K8s组件系列（八）---- 存储</title>
      <link>https://kingjcy.github.io/post/cloud/paas/base/kubernetes/k8s-store/</link>
      <pubDate>Tue, 03 Aug 2021 20:12:53 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/cloud/paas/base/kubernetes/k8s-store/</guid>
      <description>&lt;p&gt;Kubernetes 和 Docker 类似，也是通过 Volume 的方式提供对存储的支持。但是Kubernetes对容器存储做了一层自己的抽象，相比docker的存储来讲，K8S的存储抽象更全面，更面向应用，体现在如下几个方面：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;提供卷生命周期管理&lt;/li&gt;
&lt;li&gt;提供“声明”式定义，将使用者和提供者分离&lt;/li&gt;
&lt;li&gt;提供存储类型定义&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>云计算容器系列---- Docker image 优化</title>
      <link>https://kingjcy.github.io/post/cloud/paas/base/docker/docker-image/</link>
      <pubDate>Sat, 31 Jul 2021 11:08:19 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/cloud/paas/base/docker/docker-image/</guid>
      <description>&lt;p&gt;我们一般都是使用dockerfile来制作镜像。但是在镜像制作中，也有着很多的注意点，比如优化构建后的体积，还要优化构建速度，时区，证书等等。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>云计算K8s系列---- K8s autoscaler</title>
      <link>https://kingjcy.github.io/post/cloud/paas/base/kubernetes/k8s-autoscaler/</link>
      <pubDate>Thu, 04 Feb 2021 20:22:22 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/cloud/paas/base/kubernetes/k8s-autoscaler/</guid>
      <description>&lt;p&gt;Pod 水平自动伸缩（Horizontal Pod Autoscaler）和垂直扩展（Vertical Pod Autoscaler）以及CA（ cluster-autoscaler）特性，可以说是很实用的特性，完全自动化实现了资源的充分利用，所以单独拿出来说说。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>云计算K8s系列---- kruise</title>
      <link>https://kingjcy.github.io/post/cloud/paas/base/kubernetes/k8s-kruise/</link>
      <pubDate>Sun, 17 Jan 2021 20:12:53 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/cloud/paas/base/kubernetes/k8s-kruise/</guid>
      <description>&lt;p&gt;OpenKruise 是阿里云开源的大规模应用自动化管理引擎，在功能上对标了 Kubernetes 原生的 Deployment / StatefulSet 等控制器，但 OpenKruise 提供了更多的增强功能如：优雅原地升级、发布优先级/打散策略、多可用区workload抽象管理、统一 sidecar 容器注入管理等，都是经历了阿里巴巴超大规模应用场景打磨出的核心能力。这些 feature 帮助我们应对更加多样化的部署环境和需求、为集群维护者和应用开发者带来更加灵活的部署发布组合策略。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>云计算K8s系列---- 网络CNI</title>
      <link>https://kingjcy.github.io/post/cloud/paas/base/kubernetes/k8s-network-cni/</link>
      <pubDate>Sun, 17 Jan 2021 20:12:53 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/cloud/paas/base/kubernetes/k8s-network-cni/</guid>
      <description>&lt;p&gt;CNI（Container Network Interface）是 CNCF 旗下的一个项目，最早是由CoreOS发起的容器网络规范，由一组用于配置 Linux 容器的网络接口的规范和库组成，同时还包含了一些插件。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>云计算K8s系列---- K8s controller</title>
      <link>https://kingjcy.github.io/post/cloud/paas/base/kubernetes/k8s-controller/</link>
      <pubDate>Tue, 24 Nov 2020 20:22:22 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/cloud/paas/base/kubernetes/k8s-controller/</guid>
      <description>&lt;p&gt;pod只是运行的最小单元，我们一般不会直接使用pod。大部分情况下我们都是使用deployment（RS），deamonset，statefulset，job等控制器来完成部署调度使用。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://kingjcy.github.io/media/cloud/k8s/pod3.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>云计算K8s组件系列（一）---- K8s apiserver 详解</title>
      <link>https://kingjcy.github.io/post/cloud/paas/base/kubernetes/k8s-apiserver/</link>
      <pubDate>Sat, 24 Oct 2020 20:22:22 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/cloud/paas/base/kubernetes/k8s-apiserver/</guid>
      <description>&lt;p&gt;apiserver是集群的核心，是k8s中最重要的组件，因为它是实现声明式api的关键。&lt;/p&gt;

&lt;p&gt;kubernetes API server的核心功能是提供了kubernetes各类资源对象（pod、RC 、service等）的增、删、改、查以及watch等HTTP Rest接口。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>云计算K8s组件系列（四）---- K8s kubelet 详解</title>
      <link>https://kingjcy.github.io/post/cloud/paas/base/kubernetes/k8s-kubelet/</link>
      <pubDate>Tue, 20 Oct 2020 20:22:22 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/cloud/paas/base/kubernetes/k8s-kubelet/</guid>
      <description>&lt;p&gt;kubelet用于处理master节点下发到本节点的任务，管理Pod以及Pod中的容器。每个kubelet进程会在API Server上注册节点信息，定期向master节点汇报节点资源的使用情况，并通过cAdvisor监控容器和节点的资源。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>云计算容器系列---- Docker network</title>
      <link>https://kingjcy.github.io/post/cloud/paas/base/docker/docker-network/</link>
      <pubDate>Wed, 14 Oct 2020 16:29:55 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/cloud/paas/base/docker/docker-network/</guid>
      <description>&lt;p&gt;容器网络的建立和控制是一种结合了network namespace、iptables、linux网桥、route table等多种Linux内核技术的综合方案,在宿主机和容器内分别创建虚拟接口，并让它们彼此连通。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;network namespace：主要提供了关于网络资源的隔离，在网络栈中，包括网卡（Network Interface）、回环设备（Loopback Device）、路由表（Routing Table）和 iptables 规则、IPv4和IPv6协议栈、/proc/net目录、/sys/class/net目录、端口（socket）等。&lt;/li&gt;
&lt;li&gt;linux Bridge：功能相当于物理交换机，为连在其上的设备（容器）转发数据帧。如docker0网桥。&lt;/li&gt;
&lt;li&gt;iptables：主要为容器提供NAT以及容器网络安全。&lt;/li&gt;
&lt;li&gt;veth pair：两个虚拟网卡组成的数据通道。在Docker中，用于连接Docker容器和Linux Bridge。一端在容器中作为eth0网卡，另一端在Linux Bridge中作为网桥的一个端口。&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>云计算K8s组件系列（五）---- K8s proxy 详解</title>
      <link>https://kingjcy.github.io/post/cloud/paas/base/kubernetes/k8s-proxy/</link>
      <pubDate>Tue, 13 Oct 2020 20:22:22 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/cloud/paas/base/kubernetes/k8s-proxy/</guid>
      <description>&lt;p&gt;kube-proxy是Kubernetes的核心组件，部署在每个Node节点上，它是实现Kubernetes Service的通信与负载均衡机制的重要组件; kube-proxy负责为Pod创建代理服务，从apiserver获取所有server信息，并根据server信息创建代理服务，实现server到Pod的请求路由和转发，从而实现K8s层级的虚拟转发网络。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>云计算K8s组件系列（二）---- K8s scheduler 详解</title>
      <link>https://kingjcy.github.io/post/cloud/paas/base/kubernetes/k8s-scheduler/</link>
      <pubDate>Thu, 24 Sep 2020 20:22:22 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/cloud/paas/base/kubernetes/k8s-scheduler/</guid>
      <description>&lt;p&gt;kube-scheduler是 kubernetes 系统的核心组件之一，主要负责整个集群资源的调度功能，根据特定的调度算法和策略，将 Pod 调度到最优的工作节点上面去，从而更加合理、更加充分的利用集群的资源。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>云计算系列---- 云计算概念</title>
      <link>https://kingjcy.github.io/post/cloud/cncf/</link>
      <pubDate>Wed, 02 Sep 2020 19:51:38 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/cloud/cncf/</guid>
      <description>&lt;p&gt;目前云计算，云原生，微服务等概念已经不绝于耳，目前来说，上云已经是一种必然的趋势。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>云计算K8s系列---- istio</title>
      <link>https://kingjcy.github.io/post/cloud/paas/base/kubernetes/k8s-istio/</link>
      <pubDate>Mon, 17 Aug 2020 20:12:53 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/cloud/paas/base/kubernetes/k8s-istio/</guid>
      <description>&lt;p&gt;istio是一款 Service Mesh 模式的落地实现，是目前servicemesh实现使用最多的一个方案，istio本身和平台无关，但是一般都是和k8s结合使用，首先k8s服务间通信和流控的相关操作。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>云计算CDCI系列---- helm3</title>
      <link>https://kingjcy.github.io/post/cloud/paas/cdci/helm3/</link>
      <pubDate>Tue, 04 Aug 2020 20:12:53 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/cloud/paas/cdci/helm3/</guid>
      <description>&lt;p&gt;在以前的一篇文章中&lt;a href=&#34;https://kingjcy.github.io/post/cloud/paas/CDCI/helm&#34;&gt;云计算CDCI系列&amp;mdash;- helm2&lt;/a&gt;中，我们说明了helm的架构使用，目前helm已经发展到了helm3，重架构方面发送了很大的变化，所以今天我们来看看helm3。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>云计算K8s组件系列—- 存储CSI</title>
      <link>https://kingjcy.github.io/post/cloud/paas/base/kubernetes/k8s-store-csi/</link>
      <pubDate>Mon, 29 Jun 2020 20:12:53 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/cloud/paas/base/kubernetes/k8s-store-csi/</guid>
      <description>&lt;p&gt;CSI是Container Storage Interface的简称，旨在能为容器编排引擎和存储系统间建立一套标准的存储调用接口，实现解耦，通过该接口能为容器编排引擎提供存储服务。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>云计算K8s组件系列（三）---- K8s controller manager 详解</title>
      <link>https://kingjcy.github.io/post/cloud/paas/base/kubernetes/k8s-controller-manager/</link>
      <pubDate>Tue, 23 Jun 2020 20:22:22 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/cloud/paas/base/kubernetes/k8s-controller-manager/</guid>
      <description>&lt;p&gt;Kubernetes 项目的核心原理，就是“控制器模式”。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>云计算K8s组件系列—- 容器运行时CRI</title>
      <link>https://kingjcy.github.io/post/cloud/paas/base/kubernetes/k8s-cri/</link>
      <pubDate>Fri, 29 May 2020 20:12:53 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/cloud/paas/base/kubernetes/k8s-cri/</guid>
      <description>&lt;p&gt;CRI就是kubelet 把对容器的操作，统一地抽象成一个接口。这样，kubelet 就只需要跟这个接口打交道了。而作为具体的容器项目，比如 Docker、 rkt、runV，它们就只需要自己提供一个该接口的实现，然后对 kubelet 暴露出 gRPC 服务即可。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>云计算K8s系列---- K8s API</title>
      <link>https://kingjcy.github.io/post/cloud/paas/base/kubernetes/k8s-api/</link>
      <pubDate>Sat, 16 May 2020 20:12:53 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/cloud/paas/base/kubernetes/k8s-api/</guid>
      <description>&lt;p&gt;为了方便查阅 API 接口的详细定义，Kubernetes 使用了 swagger-ui 提供 API 在线查询功能，其官网为&lt;a href=&#34;http://kubernetes.kansea.com/docs/reference/，&#34;&gt;http://kubernetes.kansea.com/docs/reference/，&lt;/a&gt; Kubernetes开发团队会定期更新、生成 UI 及文档。&lt;/p&gt;

&lt;p&gt;运行在 Master 节点上的 API Server 进程同时提供了 swagger-ui 的访问地址：http://&lt;master-ip&gt;: &lt;master-port&gt;/swagger-ui/。假设我们的 API Server 安装在 192.168.1.128 服务器上，绑定了 8080 端口，则可以通过访问 &lt;a href=&#34;http://192.168.1.128:8080/swagger-ui/&#34;&gt;http://192.168.1.128:8080/swagger-ui/&lt;/a&gt; 来查看 API 信息。&lt;/p&gt;

&lt;p&gt;Swagger UI 是一款 REST API 文档在线自动生成和功能测试软件，关于 Swagger 的内容请访问官网 &lt;a href=&#34;http://swagger.io。&#34;&gt;http://swagger.io。&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>云计算安全系列---- 安全</title>
      <link>https://kingjcy.github.io/post/cloud/paas/safe/safe/</link>
      <pubDate>Mon, 04 May 2020 11:26:37 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/cloud/paas/safe/safe/</guid>
      <description>&lt;p&gt;在基于k8s做应用开发的时候，都是使用admin来使用k8s，基本不用去关注授权的问题。但是，当我们将k8s作为PaaS平台的容器编排引擎，并引入多租户时，就涉及到权限管理相关的问题了，paas平台的安全都是基于k8s的安全机制来实现的。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>云计算容器系列---- Docker Principle</title>
      <link>https://kingjcy.github.io/post/cloud/paas/base/docker/docker-principle/</link>
      <pubDate>Tue, 14 Apr 2020 16:29:55 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/cloud/paas/base/docker/docker-principle/</guid>
      <description>&lt;p&gt;Docker实质上是汇集了linux容器（各种namespaces）、cgroups以及“叠加”类文件系统（changeroot）等多种核心技术的一种复合技术。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>云计算K8s组件系列（九）---- 网络</title>
      <link>https://kingjcy.github.io/post/cloud/paas/base/kubernetes/k8s-network/</link>
      <pubDate>Fri, 10 Apr 2020 20:12:53 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/cloud/paas/base/kubernetes/k8s-network/</guid>
      <description>&lt;p&gt;Kubernetes中有三种网络和三种IP。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://kingjcy.github.io/media/cloud/k8s/network&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>云计算容器系列---- Docker</title>
      <link>https://kingjcy.github.io/post/cloud/paas/base/docker/docker/</link>
      <pubDate>Fri, 14 Feb 2020 16:08:19 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/cloud/paas/base/docker/docker/</guid>
      <description>&lt;p&gt;docker是一种虚拟化的技术，相对于虚拟机更加轻量级。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://kingjcy.github.io/media/cloud/docker/docker.svg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>云计算系列---- PaaS</title>
      <link>https://kingjcy.github.io/post/cloud/paas/paas/</link>
      <pubDate>Thu, 02 Jan 2020 19:51:38 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/cloud/paas/paas/</guid>
      <description>&lt;p&gt;PaaS就是一个为应用提供自动化研发，部署，调度，运维的管理平台。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>云计算K8s系列---- K8s Principle</title>
      <link>https://kingjcy.github.io/post/cloud/paas/base/kubernetes/k8s-principle/</link>
      <pubDate>Wed, 20 Nov 2019 20:22:22 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/cloud/paas/base/kubernetes/k8s-principle/</guid>
      <description>&lt;p&gt;很多的集群管理项目（比如 Yarn、Mesos，以及 Swarm）所擅长的，都是把一个容器，按照某种规则，放置在某个最佳节点上运行起来。这种功能，我们称为“调度”。&lt;/p&gt;

&lt;p&gt;Kubernetes 项目所擅长的，是按照用户的意愿和整个系统的规则，使用声明式api，完全自动化地处理好容器之间的各种关系。这种功能，就是我们经常听到的一个概念：编排。&lt;/p&gt;

&lt;p&gt;所以说，Kubernetes 项目的本质，是为用户提供一个具有普遍意义的容器编排工具。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>云计算CDCI系列---- jenkins</title>
      <link>https://kingjcy.github.io/post/cloud/paas/cdci/jenkins/</link>
      <pubDate>Fri, 13 Sep 2019 20:12:53 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/cloud/paas/cdci/jenkins/</guid>
      <description>&lt;p&gt;Jenkins是一款开源 CI&amp;amp;CD 软件，用于自动化各种任务，包括构建、测试和部署软件,Jenkins 支持各种运行方式，可通过系统包、Docker 或者通过一个独立的 Java 程序。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>云计算CDCI系列---- harbor</title>
      <link>https://kingjcy.github.io/post/cloud/paas/cdci/harbor/</link>
      <pubDate>Sun, 23 Jun 2019 20:12:53 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/cloud/paas/cdci/harbor/</guid>
      <description>&lt;p&gt;Harbor是由VMware公司开源的企业级的Docker Registry管理项目，它包括权限管理(RBAC)、LDAP、日志审核、管理界面、自我注册、镜像复制和中文支持等功能。harbor项目是由VMware中国研发的团队负责开发，所以对国内非常友好。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>云计算数据库系列---- etcd-operator</title>
      <link>https://kingjcy.github.io/post/cloud/paas/db/etcd-operator/</link>
      <pubDate>Sat, 04 May 2019 11:26:37 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/cloud/paas/db/etcd-operator/</guid>
      <description>&lt;p&gt;etcd operator管理部署到Kubernetes的 etcd集群，并自动执行与操作etcd集群相关的任务(创建，销毁，调整，故障转移，滚动升级，备份还原)。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>云计算K8s系列---- K8s addons</title>
      <link>https://kingjcy.github.io/post/cloud/paas/base/kubernetes/k8s-addons/</link>
      <pubDate>Wed, 17 Apr 2019 20:12:53 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/cloud/paas/base/kubernetes/k8s-addons/</guid>
      <description>&lt;p&gt;k8s有很多的插件是必须的，我们下面来看看一些重要的组件。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>云计算K8s系列---- operator</title>
      <link>https://kingjcy.github.io/post/cloud/paas/base/kubernetes/k8s-operator/</link>
      <pubDate>Wed, 17 Apr 2019 20:12:53 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/cloud/paas/base/kubernetes/k8s-operator/</guid>
      <description>&lt;p&gt;Operator 是指一类基于 Kubernetes 自定义资源对象(CRD)和控制器(Controller)的云原生拓展服务，其中 CRD 定义了每个 operator 所创建和管理的自定义资源对象，Controller 则包含了管理这些对象所相关的运维逻辑代码。&lt;/p&gt;

&lt;p&gt;其实operator和控制器是差不多，只不过operator是针对特定应用程序的控制器，比如数据库etcd，需要结合很多etcd的专业部署运维知识做逻辑处理。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>云计算K8s系列---- K8s Tutorial</title>
      <link>https://kingjcy.github.io/post/cloud/paas/base/kubernetes/k8s-tutorial/</link>
      <pubDate>Thu, 04 Apr 2019 11:26:37 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/cloud/paas/base/kubernetes/k8s-tutorial/</guid>
      <description>&lt;p&gt;kubernetes是一种容器管理系统，可以支持容器自身的不足&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;解决了容器安全问题：密钥与配置管理&lt;/li&gt;
&lt;li&gt;容器管理：部署，升级回滚，扩缩容，自愈等。&lt;/li&gt;
&lt;li&gt;网络问题：服务发现和负载均衡&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;直白的说，Kubernetes用户可以通过编写一个yaml或者json格式的配置文件，也可以通过工具/代码生成或直接请求kubernetes API创建应用，该配置文件中包含了用户想要应用程序保持的状态，不论整个kubernetes集群中的个别主机发生什么问题，都不会影响应用程序的状态，你还可以通过改变该配置文件或请求kubernetes API来改变应用程序的状态。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>云计算CDCI系列---- helm2</title>
      <link>https://kingjcy.github.io/post/cloud/paas/cdci/helm/</link>
      <pubDate>Wed, 11 Jul 2018 20:12:53 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/cloud/paas/cdci/helm/</guid>
      <description>&lt;p&gt;Helm 是 Deis (&lt;a href=&#34;https://deis.com/&#34;&gt;https://deis.com/&lt;/a&gt;) 开发的一个用于 kubernetes 的包管理器。每个包称为一个 Chart，一个 Chart 是一个目录（一般情况下会将目录进行打包压缩，形成 name-version.tgz 格式的单一文件，方便传输和存储),可以将 Helm 看作 Kubernetes 下的 apt-get/yum。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>云计算devops系列---- ops</title>
      <link>https://kingjcy.github.io/post/cloud/paas/ops/ops/</link>
      <pubDate>Mon, 04 Jun 2018 11:26:37 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/cloud/paas/ops/ops/</guid>
      <description>&lt;p&gt;应用程序升级面临最大挑战是新旧业务切换，将软件从测试的最后阶段带到生产环境，同时要保证系统不间断提供服务。长期以来，业务升级渐渐形成了几个发布策略：蓝绿发布、金丝雀发布和滚动发布等灰度发布策略，目的是尽可能避免因发布导致的流量丢失或服务不可用问题。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>云计算K8s系列---- K8s Rpm Build</title>
      <link>https://kingjcy.github.io/post/cloud/paas/base/kubernetes/k8s-rpm-build/</link>
      <pubDate>Wed, 11 Apr 2018 20:20:00 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/cloud/paas/base/kubernetes/k8s-rpm-build/</guid>
      <description>&lt;p&gt;记录rpm的打包过程&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>云计算devops系列---- dev</title>
      <link>https://kingjcy.github.io/post/cloud/paas/ops/dev/</link>
      <pubDate>Wed, 04 Apr 2018 11:26:37 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/cloud/paas/ops/dev/</guid>
      <description>&lt;p&gt;开发相关事项。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>云计算平台系列---- rancher</title>
      <link>https://kingjcy.github.io/post/cloud/paas/platform/racher/</link>
      <pubDate>Mon, 17 Jul 2017 20:12:53 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/cloud/paas/platform/racher/</guid>
      <description>&lt;p&gt;Rancher是一个开源的企业级容器管理平台,Rancher提供了在生产环境中使用的管理Docker和Kubernetes的全栈化容器部署与管理平台。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>