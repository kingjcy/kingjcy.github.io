<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Path on kingjcy blog</title>
    <link>https://kingjcy.github.io/tags/path/</link>
    <description>Recent content in Path on kingjcy blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>Copyright (c) 2020. All rights reserved.</copyright>
    <lastBuildDate>Wed, 22 Jun 2016 09:41:29 +0800</lastBuildDate>
    
	<atom:link href="https://kingjcy.github.io/tags/path/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>golang系列---- Go Path</title>
      <link>https://kingjcy.github.io/post/golang/go-path/</link>
      <pubDate>Wed, 22 Jun 2016 09:41:29 +0800</pubDate>
      
      <guid>https://kingjcy.github.io/post/golang/go-path/</guid>
      <description>path path 包实现了一系列实用函数， 这些函数可以对实用斜杠进行分隔的路径进行处理。
直接上实例
package main; import ( &amp;quot;fmt&amp;quot; &amp;quot;path&amp;quot; ) //go语言path包的学习 func main() { //返回路径的最后一个元素 fmt.Println(path.Base(&amp;quot;./a/b/c&amp;quot;)); //如果路径为空字符串，返回. fmt.Println(path.Base(&amp;quot;&amp;quot;)); //如果路径只有斜线，返回/ fmt.Println(path.Base(&amp;quot;///&amp;quot;)); //返回等价的最短路径 //1.用一个斜线替换多个斜线 //2.清除当前路径. //3.清除内部的..和他前面的元素 //4.以/..开头的，变成/ fmt.Println(path.Clean(&amp;quot;./a/b/../&amp;quot;)); //返回路径最后一个元素的目录 //路径为空则返回. fmt.Println(path.Dir(&amp;quot;./a/b/c&amp;quot;)); //返回路径中的扩展名 //如果没有点，返回空 fmt.Println(path.Ext(&amp;quot;./a/b/c/d.jpg&amp;quot;)); //判断路径是不是绝对路径 fmt.Println(path.IsAbs(&amp;quot;./a/b/c&amp;quot;)); fmt.Println(path.IsAbs(&amp;quot;/a/b/c&amp;quot;)); //连接路径，返回已经clean过的路径 fmt.Println(path.Join(&amp;quot;./a&amp;quot;, &amp;quot;b/c&amp;quot;, &amp;quot;../d/&amp;quot;)); //匹配文件名，完全匹配则返回true fmt.Println(path.Match(&amp;quot;*&amp;quot;, &amp;quot;a&amp;quot;)); fmt.Println(path.Match(&amp;quot;*&amp;quot;, &amp;quot;a/b/c&amp;quot;)); fmt.Println(path.Match(&amp;quot;\\b&amp;quot;, &amp;quot;b&amp;quot;)); //分割路径中的目录与文件 fmt.Println(path.Split(&amp;quot;./a/b/c/d.jpg&amp;quot;)); }  path/filepath filepath包实现了兼容各操作系统的文件路径的实用操作函数。
Abs函数返回path代表的绝对路径，如果path不是绝对路径，会加入当前工作目录以使之成为绝对路径。因为硬链接的存在，不能保证返回的绝对路径是唯一指向该地址的绝对路径。&amp;mdash;-返回带绝对路径的文件
Dir返回路径除去最后一个路径元素的部分，即该路径最后一个元素所在的目录。在使用Split去掉最后一个元素后，会简化路径并去掉末尾的斜杠。如果路径是空字符串，会返回&amp;rdquo;.&amp;ldquo;；如果路径由1到多个路径分隔符后跟0到多个非路径分隔符字符组成，会返回单个路径分隔符；其他任何情况下都不会返回以路径分隔符结尾的路径。&amp;mdash;&amp;mdash;返回当前文件的路径
直接上实例
package main; import ( &amp;quot;path/filepath&amp;quot; &amp;quot;fmt&amp;quot; &amp;quot;os&amp;quot; ) //学习filepath包，兼容各操作系统的文件路径 func main() { //返回所给路径的绝对路径 path, _ := filepath.</description>
    </item>
    
  </channel>
</rss>